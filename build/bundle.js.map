{"version":3,"file":"bundle.js","sources":["../Log.js","../module/foundry/config.js","../module/models/actor/components/Profile.js","../module/models/actor/components/SimpleStat.js","../module/models/actor/components/ComplexStat.js","../module/models/actor/components/Attributes.js","../module/models/actor/components/Creation.js","../module/models/actor/components/Karma.js","../module/models/actor/components/Health.js","../module/models/actor/CharacterModel.js","../module/foundry/sheets/CharacterActorSheet.js","../node_modules/svelte/src/version.js","../node_modules/svelte/src/internal/disclose-version.js","../node_modules/svelte/src/internal/flags/index.js","../node_modules/svelte/src/internal/flags/legacy.js","../node_modules/svelte/src/constants.js","../node_modules/esm-env/false.js","../node_modules/svelte/src/internal/shared/utils.js","../node_modules/svelte/src/internal/client/constants.js","../node_modules/svelte/src/internal/client/reactivity/equality.js","../node_modules/svelte/src/internal/client/errors.js","../node_modules/svelte/src/internal/client/reactivity/sources.js","../node_modules/svelte/src/internal/client/dom/operations.js","../node_modules/svelte/src/internal/client/reactivity/deriveds.js","../node_modules/svelte/src/internal/client/reactivity/effects.js","../node_modules/svelte/src/internal/shared/errors.js","../node_modules/svelte/src/internal/client/runtime.js","../node_modules/svelte/src/internal/client/dom/reconciler.js","../node_modules/svelte/src/internal/client/dom/template.js","../node_modules/svelte/src/internal/client/dom/legacy/lifecycle.js","../node_modules/svelte/src/index-client.js","../node_modules/svelte/src/internal/client/reactivity/store.js","../node_modules/svelte/src/internal/client/reactivity/props.js","../module/foundry/services/getResizeObserver.js","../module/foundry/services/observeMasonryLayout.js","../module/foundry/masonry/masonryInitMain.js","../module/svelte/apps/CharacterSheetApp.svelte","../module/foundry/hooks/renderCharacterActorSheet/onRenderCharacterActorSheet.js","../sr3e.js"],"sourcesContent":["export default class Log {\r\n    static error(message, sender, obj) {\r\n        this._print('‚ùå', 'red', message, sender, obj);\r\n    }\r\n\r\n    static warn(message, sender, obj) {\r\n        this._print('‚ö†Ô∏è', 'orange', message, sender, obj);\r\n    }\r\n\r\n    static info(message, sender, obj) {\r\n        this._print('‚ÑπÔ∏è', 'blue', message, sender, obj);\r\n    }\r\n\r\n    static success(message, sender, obj) {\r\n        this._print('‚úÖ', 'lightgreen', message, sender, obj);\r\n    }\r\n\r\n    static inspect(message, sender, obj) {\r\n        this._print('üîé', 'purple', message, sender, obj);\r\n    }\r\n\r\n    static _print(icon, color, message, sender, obj) {\r\n        const iconStyle = `font-weight: bold; color: ${color};`;\r\n        const sr3eStyle = `font-weight: bold; color: ${color};`;\r\n        const msgStyle = 'color: orange;';\r\n        const senderStyle = `font-weight: bold; color: ${color};`;\r\n\r\n        if (obj !== undefined) {\r\n            console.log(\r\n                `%c${icon} | %csr3e | %c${message} in %c${sender}`,\r\n                iconStyle,\r\n                sr3eStyle,\r\n                msgStyle,\r\n                senderStyle,\r\n                obj\r\n            );\r\n        } else {\r\n            console.log(\r\n                `%c${icon} | %csr3e | %c${message} in %c${sender}`,\r\n                iconStyle,\r\n                sr3eStyle,\r\n                msgStyle,\r\n                senderStyle\r\n            );\r\n        }\r\n    }\r\n}","export const sr3e = {};\r\n\r\nsr3e.test = \"sr3e.test\";\r\n","export default class Profile extends foundry.abstract.TypeDataModel {\r\n  static defineSchema() {\r\n    return {\r\n      names: new foundry.data.fields.ArrayField(\r\n        new foundry.data.fields.SchemaField({\r\n          alias: new foundry.data.fields.StringField({\r\n            required: false,\r\n            initial: \"\",\r\n          }),\r\n        }),\r\n        {\r\n          required: true,\r\n          initial: [],\r\n        }\r\n      ),\r\n\r\n      metaHumanity: new foundry.data.fields.StringField({\r\n        required: false,\r\n        initial: \"\",\r\n      }),\r\n\r\n      // Image\r\n      img: new foundry.data.fields.StringField({\r\n        required: false,\r\n        initial: \"systems/sr3e/textures/ai-generated/humans.webp\",\r\n      }),\r\n\r\n      // Pronouns\r\n      pronouns: new foundry.data.fields.StringField({\r\n        required: false,\r\n        initial: \"Them/They\",\r\n      }),\r\n\r\n      // Age\r\n      age: new foundry.data.fields.NumberField({\r\n        required: false,\r\n        initial: 0,\r\n        integer: true,\r\n      }),\r\n\r\n      // Weight\r\n      weight: new foundry.data.fields.NumberField({\r\n        required: false,\r\n        initial: 0,\r\n        integer: true,\r\n      }),\r\n\r\n      // Height\r\n      height: new foundry.data.fields.NumberField({\r\n        required: false,\r\n        initial: 0,\r\n        integer: true,\r\n      }),\r\n\r\n      // Quote\r\n      quote: new foundry.data.fields.StringField({\r\n        required: false,\r\n        initial: \"Alea iacta es\",\r\n      }),\r\n    };\r\n  }\r\n}","export default class SimpleStat extends foundry.abstract.TypeDataModel {\r\n    static defineSchema() {\r\n      return {\r\n        total: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n        value: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n        mod: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n      };\r\n    }\r\n  }","import SimpleStat from \"./SimpleStat.js\";\r\n\r\nexport default class ComplexStat extends SimpleStat {\r\n  static defineSchema() {\r\n    return {\r\n      ...super.defineSchema(),\r\n      meta: new foundry.data.fields.NumberField({\r\n        required: true,\r\n        initial: 0,\r\n        integer: true,\r\n      }),\r\n    };\r\n  }\r\n}\r\n","import SimpleStat from \"./SimpleStat.js\";\r\nimport ComplexStat from \"./ComplexStat.js\";\r\n\r\nexport default class AttributesModel extends foundry.abstract.TypeDataModel {\r\n  static defineSchema() {\r\n    return {\r\n      // Attributes using ComplexStat (with meta)\r\n      body: new foundry.data.fields.SchemaField(ComplexStat.defineSchema()),\r\n      quickness: new foundry.data.fields.SchemaField(ComplexStat.defineSchema()),\r\n      strength: new foundry.data.fields.SchemaField(ComplexStat.defineSchema()),\r\n      charisma: new foundry.data.fields.SchemaField(ComplexStat.defineSchema()),\r\n      intelligence: new foundry.data.fields.SchemaField(ComplexStat.defineSchema()),\r\n      willpower: new foundry.data.fields.SchemaField(ComplexStat.defineSchema()),\r\n\r\n      // Attributes using SimpleStat (without meta)\r\n      initiative: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      reaction: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      magic: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      essence: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n\r\n      // Attributes using SimpleStat (formerly base, now value)\r\n      combat: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      astral: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      hacking: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      control: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      spell: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      walking: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n      running: new foundry.data.fields.SchemaField(SimpleStat.defineSchema()),\r\n    };\r\n  }\r\n}","// src/item/data/components/CreationModel.js\r\n\r\nexport default class Creation extends foundry.abstract.TypeDataModel {\r\n    static defineSchema() {\r\n      return {\r\n        attributePoints: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n        activePoints: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n        knowledgePoints: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n        languagePoints: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n      };\r\n    }\r\n  }\r\n  ","export default class KarmaModel extends foundry.abstract.TypeDataModel {\r\n    static defineSchema() {\r\n      return {\r\n        goodKarma: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n        karmaPool: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 1,\r\n          integer: true,\r\n        }),\r\n        lifetimeKarma: new foundry.data.fields.NumberField({\r\n          required: true,\r\n          initial: 0,\r\n          integer: true,\r\n        }),\r\n        miraculousSurvival: new foundry.data.fields.BooleanField({\r\n          required: true,\r\n          initial: false,\r\n        }),\r\n      };\r\n    }\r\n  }","export default class HealthModel extends foundry.abstract.TypeDataModel {\r\n  static defineSchema() {\r\n    return {\r\n      stun: new foundry.data.fields.ArrayField(\r\n        new foundry.data.fields.BooleanField({\r\n          required: true,\r\n        }),\r\n        {\r\n          required: true,\r\n          initial: Array(10).fill(false), // Default to 10 false values\r\n        }\r\n      ),\r\n      physical: new foundry.data.fields.ArrayField(\r\n        new foundry.data.fields.BooleanField({\r\n          required: true,\r\n        }),\r\n        {\r\n          required: true,\r\n          initial: Array(10).fill(false), // Default to 10 false values\r\n        }\r\n      ),\r\n      overflow: new foundry.data.fields.NumberField({\r\n        required: true,\r\n        initial: 0,\r\n        integer: true,\r\n      }),\r\n      penalty: new foundry.data.fields.NumberField({ // Fix the typo here\r\n        required: true,\r\n        initial: 0,\r\n        integer: true,\r\n      }),\r\n    };\r\n  }\r\n}\r\n","import Profile from \"./components/Profile.js\";\r\nimport Attributes from \"./components/Attributes.js\";\r\nimport Creation from \"./components/Creation.js\";\r\nimport KarmaModel from \"./components/Karma.js\";\r\nimport HealthModel from \"./components/Health.js\";\r\n\r\nexport default class CharacterModel extends foundry.abstract.TypeDataModel {\r\n  static defineSchema() {\r\n    return {\r\n      attributes: new foundry.data.fields.SchemaField(Attributes.defineSchema()),\r\n      profile: new foundry.data.fields.SchemaField(Profile.defineSchema()),\r\n      creation: new foundry.data.fields.SchemaField(Creation.defineSchema()),\r\n      karma: new foundry.data.fields.SchemaField(KarmaModel.defineSchema()),\r\n      health: new foundry.data.fields.SchemaField(HealthModel.defineSchema()),\r\n      journalEntryUuid: new foundry.data.fields.StringField({\r\n        required: false,\r\n        initial: \"\",\r\n      }),\r\n    };\r\n  }\r\n}","export default class CharacterActorSheet extends ActorSheet {\r\n  static get defaultOptions() {\r\n    return foundry.utils.mergeObject(super.defaultOptions, {\r\n      classes: ['sr3e', 'sheet', 'character'],\r\n      template: \"/systems/sr3e/templates/sheet/actor/character-sheet.html\"\r\n    });\r\n  }\r\n}","// generated during release, do not modify\n\n/**\n * The current version, as set in package.json.\n * @type {string}\n */\nexport const VERSION = '5.19.3';\nexport const PUBLIC_VERSION = '5';\n","import { PUBLIC_VERSION } from '../version.js';\n\nif (typeof window !== 'undefined')\n\t// @ts-ignore\n\t(window.__svelte ||= { v: new Set() }).v.add(PUBLIC_VERSION);\n","export let legacy_mode_flag = false;\nexport let tracing_mode_flag = false;\n\nexport function enable_legacy_mode_flag() {\n\tlegacy_mode_flag = true;\n}\n\nexport function enable_tracing_mode_flag() {\n\ttracing_mode_flag = true;\n}\n","import { enable_legacy_mode_flag } from './index.js';\n\nenable_legacy_mode_flag();\n","export const EACH_ITEM_REACTIVE = 1;\nexport const EACH_INDEX_REACTIVE = 1 << 1;\n/** See EachBlock interface metadata.is_controlled for an explanation what this is */\nexport const EACH_IS_CONTROLLED = 1 << 2;\nexport const EACH_IS_ANIMATED = 1 << 3;\nexport const EACH_ITEM_IMMUTABLE = 1 << 4;\n\nexport const PROPS_IS_IMMUTABLE = 1;\nexport const PROPS_IS_RUNES = 1 << 1;\nexport const PROPS_IS_UPDATED = 1 << 2;\nexport const PROPS_IS_BINDABLE = 1 << 3;\nexport const PROPS_IS_LAZY_INITIAL = 1 << 4;\n\nexport const TRANSITION_IN = 1;\nexport const TRANSITION_OUT = 1 << 1;\nexport const TRANSITION_GLOBAL = 1 << 2;\n\nexport const TEMPLATE_FRAGMENT = 1;\nexport const TEMPLATE_USE_IMPORT_NODE = 1 << 1;\n\nexport const HYDRATION_START = '[';\n/** used to indicate that an `{:else}...` block was rendered */\nexport const HYDRATION_START_ELSE = '[!';\nexport const HYDRATION_END = ']';\nexport const HYDRATION_ERROR = {};\n\nexport const ELEMENT_IS_NAMESPACED = 1;\nexport const ELEMENT_PRESERVE_ATTRIBUTE_CASE = 1 << 1;\n\nexport const UNINITIALIZED = Symbol();\n\n// Dev-time component properties\nexport const FILENAME = Symbol('filename');\nexport const HMR = Symbol('hmr');\n\nexport const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\nexport const NAMESPACE_MATHML = 'http://www.w3.org/1998/Math/MathML';\n\n// we use a list of ignorable runtime warnings because not every runtime warning\n// can be ignored and we want to keep the validation for svelte-ignore in place\nexport const IGNORABLE_RUNTIME_WARNINGS = /** @type {const} */ ([\n\t'state_snapshot_uncloneable',\n\t'binding_property_non_reactive',\n\t'hydration_attribute_changed',\n\t'hydration_html_changed',\n\t'ownership_invalid_binding',\n\t'ownership_invalid_mutation'\n]);\n\n/**\n * Whitespace inside one of these elements will not result in\n * a whitespace node being created in any circumstances. (This\n * list is almost certainly very incomplete)\n * TODO this is currently unused\n */\nexport const ELEMENTS_WITHOUT_TEXT = ['audio', 'datalist', 'dl', 'optgroup', 'select', 'video'];\n","export default false;\n","// Store the references to globals in case someone tries to monkey patch these, causing the below\n// to de-opt (this occurs often when using popular extensions).\nexport var is_array = Array.isArray;\nexport var index_of = Array.prototype.indexOf;\nexport var array_from = Array.from;\nexport var object_keys = Object.keys;\nexport var define_property = Object.defineProperty;\nexport var get_descriptor = Object.getOwnPropertyDescriptor;\nexport var get_descriptors = Object.getOwnPropertyDescriptors;\nexport var object_prototype = Object.prototype;\nexport var array_prototype = Array.prototype;\nexport var get_prototype_of = Object.getPrototypeOf;\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\nexport const noop = () => {};\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n\n/**\n * @template [T=any]\n * @param {any} value\n * @returns {value is PromiseLike<T>}\n */\nexport function is_promise(value) {\n\treturn typeof value?.then === 'function';\n}\n\n/** @param {Function} fn */\nexport function run(fn) {\n\treturn fn();\n}\n\n/** @param {Array<() => void>} arr */\nexport function run_all(arr) {\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tarr[i]();\n\t}\n}\n\n/**\n * TODO replace with Promise.withResolvers once supported widely enough\n * @template T\n */\nexport function deferred() {\n\t/** @type {(value: T) => void} */\n\tvar resolve;\n\n\t/** @type {(reason: any) => void} */\n\tvar reject;\n\n\t/** @type {Promise<T>} */\n\tvar promise = new Promise((res, rej) => {\n\t\tresolve = res;\n\t\treject = rej;\n\t});\n\n\t// @ts-expect-error\n\treturn { promise, resolve, reject };\n}\n\n/**\n * @template V\n * @param {V} value\n * @param {V | (() => V)} fallback\n * @param {boolean} [lazy]\n * @returns {V}\n */\nexport function fallback(value, fallback, lazy = false) {\n\treturn value === undefined\n\t\t? lazy\n\t\t\t? /** @type {() => V} */ (fallback)()\n\t\t\t: /** @type {V} */ (fallback)\n\t\t: value;\n}\n","export const DERIVED = 1 << 1;\nexport const EFFECT = 1 << 2;\nexport const RENDER_EFFECT = 1 << 3;\nexport const BLOCK_EFFECT = 1 << 4;\nexport const BRANCH_EFFECT = 1 << 5;\nexport const ROOT_EFFECT = 1 << 6;\nexport const BOUNDARY_EFFECT = 1 << 7;\nexport const UNOWNED = 1 << 8;\nexport const DISCONNECTED = 1 << 9;\nexport const CLEAN = 1 << 10;\nexport const DIRTY = 1 << 11;\nexport const MAYBE_DIRTY = 1 << 12;\nexport const INERT = 1 << 13;\nexport const DESTROYED = 1 << 14;\nexport const EFFECT_RAN = 1 << 15;\n/** 'Transparent' effects do not create a transition boundary */\nexport const EFFECT_TRANSPARENT = 1 << 16;\n/** Svelte 4 legacy mode props need to be handled with deriveds and be recognized elsewhere, hence the dedicated flag */\nexport const LEGACY_DERIVED_PROP = 1 << 17;\nexport const INSPECT_EFFECT = 1 << 18;\nexport const HEAD_EFFECT = 1 << 19;\nexport const EFFECT_HAS_DERIVED = 1 << 20;\n\nexport const STATE_SYMBOL = Symbol('$state');\nexport const STATE_SYMBOL_METADATA = Symbol('$state metadata');\nexport const LEGACY_PROPS = Symbol('legacy props');\nexport const LOADING_ATTR_SYMBOL = Symbol('');\n","/** @import { Equals } from '#client' */\n/** @type {Equals} */\nexport function equals(value) {\n\treturn value === this.v;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function safe_not_equal(a, b) {\n\treturn a != a\n\t\t? b == b\n\t\t: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function not_equal(a, b) {\n\treturn a !== b;\n}\n\n/** @type {Equals} */\nexport function safe_equals(value) {\n\treturn !safe_not_equal(value, this.v);\n}\n","/* This file is generated by scripts/process-messages/index.js. Do not edit! */\n\nimport { DEV } from 'esm-env';\n\n/**\n * Using `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead\n * @returns {never}\n */\nexport function bind_invalid_checkbox_value() {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_invalid_checkbox_value\\nUsing \\`bind:value\\` together with a checkbox input is not allowed. Use \\`bind:checked\\` instead\\nhttps://svelte.dev/e/bind_invalid_checkbox_value`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_checkbox_value`);\n\t}\n}\n\n/**\n * Component %component% has an export named `%key%` that a consumer component is trying to access using `bind:%key%`, which is disallowed. Instead, use `bind:this` (e.g. `<%name% bind:this={component} />`) and then access the property on the bound component instance (e.g. `component.%key%`)\n * @param {string} component\n * @param {string} key\n * @param {string} name\n * @returns {never}\n */\nexport function bind_invalid_export(component, key, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_invalid_export\\nComponent ${component} has an export named \\`${key}\\` that a consumer component is trying to access using \\`bind:${key}\\`, which is disallowed. Instead, use \\`bind:this\\` (e.g. \\`<${name} bind:this={component} />\\`) and then access the property on the bound component instance (e.g. \\`component.${key}\\`)\\nhttps://svelte.dev/e/bind_invalid_export`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_export`);\n\t}\n}\n\n/**\n * A component is attempting to bind to a non-bindable property `%key%` belonging to %component% (i.e. `<%name% bind:%key%={...}>`). To mark a property as bindable: `let { %key% = $bindable() } = $props()`\n * @param {string} key\n * @param {string} component\n * @param {string} name\n * @returns {never}\n */\nexport function bind_not_bindable(key, component, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_not_bindable\\nA component is attempting to bind to a non-bindable property \\`${key}\\` belonging to ${component} (i.e. \\`<${name} bind:${key}={...}>\\`). To mark a property as bindable: \\`let { ${key} = $bindable() } = $props()\\`\\nhttps://svelte.dev/e/bind_not_bindable`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_not_bindable`);\n\t}\n}\n\n/**\n * %parent% called `%method%` on an instance of %component%, which is no longer valid in Svelte 5\n * @param {string} parent\n * @param {string} method\n * @param {string} component\n * @returns {never}\n */\nexport function component_api_changed(parent, method, component) {\n\tif (DEV) {\n\t\tconst error = new Error(`component_api_changed\\n${parent} called \\`${method}\\` on an instance of ${component}, which is no longer valid in Svelte 5\\nhttps://svelte.dev/e/component_api_changed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/component_api_changed`);\n\t}\n}\n\n/**\n * Attempted to instantiate %component% with `new %name%`, which is no longer valid in Svelte 5. If this component is not under your control, set the `compatibility.componentApi` compiler option to `4` to keep it working.\n * @param {string} component\n * @param {string} name\n * @returns {never}\n */\nexport function component_api_invalid_new(component, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`component_api_invalid_new\\nAttempted to instantiate ${component} with \\`new ${name}\\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \\`compatibility.componentApi\\` compiler option to \\`4\\` to keep it working.\\nhttps://svelte.dev/e/component_api_invalid_new`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/component_api_invalid_new`);\n\t}\n}\n\n/**\n * A derived value cannot reference itself recursively\n * @returns {never}\n */\nexport function derived_references_self() {\n\tif (DEV) {\n\t\tconst error = new Error(`derived_references_self\\nA derived value cannot reference itself recursively\\nhttps://svelte.dev/e/derived_references_self`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/derived_references_self`);\n\t}\n}\n\n/**\n * Keyed each block has duplicate key `%value%` at indexes %a% and %b%\n * @param {string} a\n * @param {string} b\n * @param {string | undefined | null} [value]\n * @returns {never}\n */\nexport function each_key_duplicate(a, b, value) {\n\tif (DEV) {\n\t\tconst error = new Error(`each_key_duplicate\\n${value ? `Keyed each block has duplicate key \\`${value}\\` at indexes ${a} and ${b}` : `Keyed each block has duplicate key at indexes ${a} and ${b}`}\\nhttps://svelte.dev/e/each_key_duplicate`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/each_key_duplicate`);\n\t}\n}\n\n/**\n * `%rune%` cannot be used inside an effect cleanup function\n * @param {string} rune\n * @returns {never}\n */\nexport function effect_in_teardown(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_in_teardown\\n\\`${rune}\\` cannot be used inside an effect cleanup function\\nhttps://svelte.dev/e/effect_in_teardown`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_teardown`);\n\t}\n}\n\n/**\n * Effect cannot be created inside a `$derived` value that was not itself created inside an effect\n * @returns {never}\n */\nexport function effect_in_unowned_derived() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_in_unowned_derived\\nEffect cannot be created inside a \\`$derived\\` value that was not itself created inside an effect\\nhttps://svelte.dev/e/effect_in_unowned_derived`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_unowned_derived`);\n\t}\n}\n\n/**\n * `%rune%` can only be used inside an effect (e.g. during component initialisation)\n * @param {string} rune\n * @returns {never}\n */\nexport function effect_orphan(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_orphan\\n\\`${rune}\\` can only be used inside an effect (e.g. during component initialisation)\\nhttps://svelte.dev/e/effect_orphan`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_orphan`);\n\t}\n}\n\n/**\n * Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\n * @returns {never}\n */\nexport function effect_update_depth_exceeded() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_update_depth_exceeded\\nMaximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\\nhttps://svelte.dev/e/effect_update_depth_exceeded`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_update_depth_exceeded`);\n\t}\n}\n\n/**\n * Failed to hydrate the application\n * @returns {never}\n */\nexport function hydration_failed() {\n\tif (DEV) {\n\t\tconst error = new Error(`hydration_failed\\nFailed to hydrate the application\\nhttps://svelte.dev/e/hydration_failed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/hydration_failed`);\n\t}\n}\n\n/**\n * Could not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`\n * @returns {never}\n */\nexport function invalid_snippet() {\n\tif (DEV) {\n\t\tconst error = new Error(`invalid_snippet\\nCould not \\`{@render}\\` snippet due to the expression being \\`null\\` or \\`undefined\\`. Consider using optional chaining \\`{@render snippet?.()}\\`\\nhttps://svelte.dev/e/invalid_snippet`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/invalid_snippet`);\n\t}\n}\n\n/**\n * `%name%(...)` cannot be used in runes mode\n * @param {string} name\n * @returns {never}\n */\nexport function lifecycle_legacy_only(name) {\n\tif (DEV) {\n\t\tconst error = new Error(`lifecycle_legacy_only\\n\\`${name}(...)\\` cannot be used in runes mode\\nhttps://svelte.dev/e/lifecycle_legacy_only`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/lifecycle_legacy_only`);\n\t}\n}\n\n/**\n * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value\n * @param {string} key\n * @returns {never}\n */\nexport function props_invalid_value(key) {\n\tif (DEV) {\n\t\tconst error = new Error(`props_invalid_value\\nCannot do \\`bind:${key}={undefined}\\` when \\`${key}\\` has a fallback value\\nhttps://svelte.dev/e/props_invalid_value`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/props_invalid_value`);\n\t}\n}\n\n/**\n * Rest element properties of `$props()` such as `%property%` are readonly\n * @param {string} property\n * @returns {never}\n */\nexport function props_rest_readonly(property) {\n\tif (DEV) {\n\t\tconst error = new Error(`props_rest_readonly\\nRest element properties of \\`$props()\\` such as \\`${property}\\` are readonly\\nhttps://svelte.dev/e/props_rest_readonly`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/props_rest_readonly`);\n\t}\n}\n\n/**\n * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files\n * @param {string} rune\n * @returns {never}\n */\nexport function rune_outside_svelte(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`rune_outside_svelte\\nThe \\`${rune}\\` rune is only available inside \\`.svelte\\` and \\`.svelte.js/ts\\` files\\nhttps://svelte.dev/e/rune_outside_svelte`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/rune_outside_svelte`);\n\t}\n}\n\n/**\n * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.\n * @returns {never}\n */\nexport function state_descriptors_fixed() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_descriptors_fixed\\nProperty descriptors defined on \\`$state\\` objects must contain \\`value\\` and always be \\`enumerable\\`, \\`configurable\\` and \\`writable\\`.\\nhttps://svelte.dev/e/state_descriptors_fixed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_descriptors_fixed`);\n\t}\n}\n\n/**\n * Cannot set prototype of `$state` object\n * @returns {never}\n */\nexport function state_prototype_fixed() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_prototype_fixed\\nCannot set prototype of \\`$state\\` object\\nhttps://svelte.dev/e/state_prototype_fixed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_prototype_fixed`);\n\t}\n}\n\n/**\n * Reading state that was created inside the same derived is forbidden. Consider using `untrack` to read locally created state\n * @returns {never}\n */\nexport function state_unsafe_local_read() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_unsafe_local_read\\nReading state that was created inside the same derived is forbidden. Consider using \\`untrack\\` to read locally created state\\nhttps://svelte.dev/e/state_unsafe_local_read`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_unsafe_local_read`);\n\t}\n}\n\n/**\n * Updating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without `$state`\n * @returns {never}\n */\nexport function state_unsafe_mutation() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_unsafe_mutation\\nUpdating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without \\`$state\\`\\nhttps://svelte.dev/e/state_unsafe_mutation`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_unsafe_mutation`);\n\t}\n}","/** @import { Derived, Effect, Reaction, Source, Value } from '#client' */\nimport { DEV } from 'esm-env';\nimport {\n\tcomponent_context,\n\tactive_reaction,\n\tactive_effect,\n\tuntracked_writes,\n\tget,\n\tis_runes,\n\tschedule_effect,\n\tset_untracked_writes,\n\tset_signal_status,\n\tuntrack,\n\tincrement_write_version,\n\tupdate_effect,\n\tderived_sources,\n\tset_derived_sources,\n\tcheck_dirtiness,\n\tset_is_flushing_effect,\n\tis_flushing_effect,\n\tuntracking\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport {\n\tCLEAN,\n\tDERIVED,\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tINSPECT_EFFECT,\n\tUNOWNED,\n\tMAYBE_DIRTY,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT\n} from '../constants.js';\nimport * as e from '../errors.js';\nimport { legacy_mode_flag, tracing_mode_flag } from '../../flags/index.js';\nimport { get_stack } from '../dev/tracing.js';\n\nexport let inspect_effects = new Set();\n\n/**\n * @param {Set<any>} v\n */\nexport function set_inspect_effects(v) {\n\tinspect_effects = v;\n}\n\n/**\n * @template V\n * @param {V} v\n * @param {Error | null} [stack]\n * @returns {Source<V>}\n */\nexport function source(v, stack) {\n\t/** @type {Value} */\n\tvar signal = {\n\t\tf: 0, // TODO ideally we could skip this altogether, but it causes type errors\n\t\tv,\n\t\treactions: null,\n\t\tequals,\n\t\trv: 0,\n\t\twv: 0\n\t};\n\n\tif (DEV && tracing_mode_flag) {\n\t\tsignal.created = stack ?? get_stack('CreatedAt');\n\t\tsignal.debug = null;\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {V} v\n */\nexport function state(v) {\n\treturn push_derived_source(source(v));\n}\n\n/**\n * @template V\n * @param {V} initial_value\n * @param {boolean} [immutable]\n * @returns {Source<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function mutable_source(initial_value, immutable = false) {\n\tconst s = source(initial_value);\n\tif (!immutable) {\n\t\ts.equals = safe_equals;\n\t}\n\n\t// bind the signal to the component context, in case we need to\n\t// track updates to trigger beforeUpdate/afterUpdate callbacks\n\tif (legacy_mode_flag && component_context !== null && component_context.l !== null) {\n\t\t(component_context.l.s ??= []).push(s);\n\t}\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {V} v\n * @param {boolean} [immutable]\n * @returns {Source<V>}\n */\nexport function mutable_state(v, immutable = false) {\n\treturn push_derived_source(mutable_source(v, immutable));\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n */\n/*#__NO_SIDE_EFFECTS__*/\nfunction push_derived_source(source) {\n\tif (active_reaction !== null && !untracking && (active_reaction.f & DERIVED) !== 0) {\n\t\tif (derived_sources === null) {\n\t\t\tset_derived_sources([source]);\n\t\t} else {\n\t\t\tderived_sources.push(source);\n\t\t}\n\t}\n\n\treturn source;\n}\n\n/**\n * @template V\n * @param {Value<V>} source\n * @param {V} value\n */\nexport function mutate(source, value) {\n\tset(\n\t\tsource,\n\t\tuntrack(() => get(source))\n\t);\n\treturn value;\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n * @param {V} value\n * @returns {V}\n */\nexport function set(source, value) {\n\tif (\n\t\tactive_reaction !== null &&\n\t\t!untracking &&\n\t\tis_runes() &&\n\t\t(active_reaction.f & (DERIVED | BLOCK_EFFECT)) !== 0 &&\n\t\t// If the source was created locally within the current derived, then\n\t\t// we allow the mutation.\n\t\t(derived_sources === null || !derived_sources.includes(source))\n\t) {\n\t\te.state_unsafe_mutation();\n\t}\n\n\treturn internal_set(source, value);\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n * @param {V} value\n * @returns {V}\n */\nexport function internal_set(source, value) {\n\tif (!source.equals(value)) {\n\t\tvar old_value = source.v;\n\t\tsource.v = value;\n\t\tsource.wv = increment_write_version();\n\n\t\tif (DEV && tracing_mode_flag) {\n\t\t\tsource.updated = get_stack('UpdatedAt');\n\t\t\tif (active_effect != null) {\n\t\t\t\tsource.trace_need_increase = true;\n\t\t\t\tsource.trace_v ??= old_value;\n\t\t\t}\n\t\t}\n\n\t\tmark_reactions(source, DIRTY);\n\n\t\t// It's possible that the current reaction might not have up-to-date dependencies\n\t\t// whilst it's actively running. So in the case of ensuring it registers the reaction\n\t\t// properly for itself, we need to ensure the current effect actually gets\n\t\t// scheduled. i.e: `$effect(() => x++)`\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tactive_effect !== null &&\n\t\t\t(active_effect.f & CLEAN) !== 0 &&\n\t\t\t(active_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0\n\t\t) {\n\t\t\tif (untracked_writes === null) {\n\t\t\t\tset_untracked_writes([source]);\n\t\t\t} else {\n\t\t\t\tuntracked_writes.push(source);\n\t\t\t}\n\t\t}\n\n\t\tif (DEV && inspect_effects.size > 0) {\n\t\t\tconst inspects = Array.from(inspect_effects);\n\t\t\tvar previously_flushing_effect = is_flushing_effect;\n\t\t\tset_is_flushing_effect(true);\n\t\t\ttry {\n\t\t\t\tfor (const effect of inspects) {\n\t\t\t\t\t// Mark clean inspect-effects as maybe dirty and then check their dirtiness\n\t\t\t\t\t// instead of just updating the effects - this way we avoid overfiring.\n\t\t\t\t\tif ((effect.f & CLEAN) !== 0) {\n\t\t\t\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t\t\t\t}\n\t\t\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\t\t\tupdate_effect(effect);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tset_is_flushing_effect(previously_flushing_effect);\n\t\t\t}\n\t\t\tinspect_effects.clear();\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @param {Value} signal\n * @param {number} status should be DIRTY or MAYBE_DIRTY\n * @returns {void}\n */\nfunction mark_reactions(signal, status) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tvar runes = is_runes();\n\tvar length = reactions.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar reaction = reactions[i];\n\t\tvar flags = reaction.f;\n\n\t\t// Skip any effects that are already dirty\n\t\tif ((flags & DIRTY) !== 0) continue;\n\n\t\t// In legacy mode, skip the current effect to prevent infinite loops\n\t\tif (!runes && reaction === active_effect) continue;\n\n\t\t// Inspect effects need to run immediately, so that the stack trace makes sense\n\t\tif (DEV && (flags & INSPECT_EFFECT) !== 0) {\n\t\t\tinspect_effects.add(reaction);\n\t\t\tcontinue;\n\t\t}\n\n\t\tset_signal_status(reaction, status);\n\n\t\t// If the signal a) was previously clean or b) is an unowned derived, then mark it\n\t\tif ((flags & (CLEAN | UNOWNED)) !== 0) {\n\t\t\tif ((flags & DERIVED) !== 0) {\n\t\t\t\tmark_reactions(/** @type {Derived} */ (reaction), MAYBE_DIRTY);\n\t\t\t} else {\n\t\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\n\t\t\t}\n\t\t}\n\t}\n}\n","/** @import { TemplateNode } from '#client' */\nimport { hydrate_node, hydrating, set_hydrate_node } from './hydration.js';\nimport { DEV } from 'esm-env';\nimport { init_array_prototype_warnings } from '../dev/equality.js';\nimport { get_descriptor } from '../../shared/utils.js';\n\n// export these for reference in the compiled code, making global name deduplication unnecessary\n/** @type {Window} */\nexport var $window;\n\n/** @type {Document} */\nexport var $document;\n\n/** @type {() => Node | null} */\nvar first_child_getter;\n/** @type {() => Node | null} */\nvar next_sibling_getter;\n\n/**\n * Initialize these lazily to avoid issues when using the runtime in a server context\n * where these globals are not available while avoiding a separate server entry point\n */\nexport function init_operations() {\n\tif ($window !== undefined) {\n\t\treturn;\n\t}\n\n\t$window = window;\n\t$document = document;\n\n\tvar element_prototype = Element.prototype;\n\tvar node_prototype = Node.prototype;\n\n\t// @ts-ignore\n\tfirst_child_getter = get_descriptor(node_prototype, 'firstChild').get;\n\t// @ts-ignore\n\tnext_sibling_getter = get_descriptor(node_prototype, 'nextSibling').get;\n\n\t// the following assignments improve perf of lookups on DOM nodes\n\t// @ts-expect-error\n\telement_prototype.__click = undefined;\n\t// @ts-expect-error\n\telement_prototype.__className = '';\n\t// @ts-expect-error\n\telement_prototype.__attributes = null;\n\t// @ts-expect-error\n\telement_prototype.__styles = null;\n\t// @ts-expect-error\n\telement_prototype.__e = undefined;\n\n\t// @ts-expect-error\n\tText.prototype.__t = undefined;\n\n\tif (DEV) {\n\t\t// @ts-expect-error\n\t\telement_prototype.__svelte_meta = null;\n\n\t\tinit_array_prototype_warnings();\n\t}\n}\n\n/**\n * @param {string} value\n * @returns {Text}\n */\nexport function create_text(value = '') {\n\treturn document.createTextNode(value);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get_first_child(node) {\n\treturn first_child_getter.call(node);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get_next_sibling(node) {\n\treturn next_sibling_getter.call(node);\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @template {Node} N\n * @param {N} node\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function child(node, is_text) {\n\tif (!hydrating) {\n\t\treturn get_first_child(node);\n\t}\n\n\tvar child = /** @type {TemplateNode} */ (get_first_child(hydrate_node));\n\n\t// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty\n\tif (child === null) {\n\t\tchild = hydrate_node.appendChild(create_text());\n\t} else if (is_text && child.nodeType !== 3) {\n\t\tvar text = create_text();\n\t\tchild?.before(text);\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\tset_hydrate_node(child);\n\treturn child;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {DocumentFragment | TemplateNode[]} fragment\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function first_child(fragment, is_text) {\n\tif (!hydrating) {\n\t\t// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)\n\t\tvar first = /** @type {DocumentFragment} */ (get_first_child(/** @type {Node} */ (fragment)));\n\n\t\t// TODO prevent user comments with the empty string when preserveComments is true\n\t\tif (first instanceof Comment && first.data === '') return get_next_sibling(first);\n\n\t\treturn first;\n\t}\n\n\t// if an {expression} is empty during SSR, there might be no\n\t// text node to hydrate ‚Äî we must therefore create one\n\tif (is_text && hydrate_node?.nodeType !== 3) {\n\t\tvar text = create_text();\n\n\t\thydrate_node?.before(text);\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\treturn hydrate_node;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {TemplateNode} node\n * @param {number} count\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function sibling(node, count = 1, is_text = false) {\n\tlet next_sibling = hydrating ? hydrate_node : node;\n\tvar last_sibling;\n\n\twhile (count--) {\n\t\tlast_sibling = next_sibling;\n\t\tnext_sibling = /** @type {TemplateNode} */ (get_next_sibling(next_sibling));\n\t}\n\n\tif (!hydrating) {\n\t\treturn next_sibling;\n\t}\n\n\tvar type = next_sibling?.nodeType;\n\n\t// if a sibling {expression} is empty during SSR, there might be no\n\t// text node to hydrate ‚Äî we must therefore create one\n\tif (is_text && type !== 3) {\n\t\tvar text = create_text();\n\t\t// If the next sibling is `null` and we're handling text then it's because\n\t\t// the SSR content was empty for the text, so we need to generate a new text\n\t\t// node and insert it after the last sibling\n\t\tif (next_sibling === null) {\n\t\t\tlast_sibling?.after(text);\n\t\t} else {\n\t\t\tnext_sibling.before(text);\n\t\t}\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\tset_hydrate_node(next_sibling);\n\treturn /** @type {TemplateNode} */ (next_sibling);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {void}\n */\nexport function clear_text_content(node) {\n\tnode.textContent = '';\n}\n","/** @import { Derived, Effect } from '#client' */\nimport { DEV } from 'esm-env';\nimport {\n\tCLEAN,\n\tDERIVED,\n\tDESTROYED,\n\tDIRTY,\n\tEFFECT_HAS_DERIVED,\n\tMAYBE_DIRTY,\n\tUNOWNED\n} from '../constants.js';\nimport {\n\tactive_reaction,\n\tactive_effect,\n\tremove_reactions,\n\tset_signal_status,\n\tskip_reaction,\n\tupdate_reaction,\n\tincrement_write_version,\n\tset_active_effect,\n\tcomponent_context\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport * as e from '../errors.js';\nimport { destroy_effect } from './effects.js';\nimport { inspect_effects, set_inspect_effects } from './sources.js';\nimport { get_stack } from '../dev/tracing.js';\nimport { tracing_mode_flag } from '../../flags/index.js';\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived(fn) {\n\tvar flags = DERIVED | DIRTY;\n\n\tif (active_effect === null) {\n\t\tflags |= UNOWNED;\n\t} else {\n\t\t// Since deriveds are evaluated lazily, any effects created inside them are\n\t\t// created too late to ensure that the parent effect is added to the tree\n\t\tactive_effect.f |= EFFECT_HAS_DERIVED;\n\t}\n\n\tvar parent_derived =\n\t\tactive_reaction !== null && (active_reaction.f & DERIVED) !== 0\n\t\t\t? /** @type {Derived} */ (active_reaction)\n\t\t\t: null;\n\n\t/** @type {Derived<V>} */\n\tconst signal = {\n\t\tchildren: null,\n\t\tctx: component_context,\n\t\tdeps: null,\n\t\tequals,\n\t\tf: flags,\n\t\tfn,\n\t\treactions: null,\n\t\trv: 0,\n\t\tv: /** @type {V} */ (null),\n\t\twv: 0,\n\t\tparent: parent_derived ?? active_effect\n\t};\n\n\tif (DEV && tracing_mode_flag) {\n\t\tsignal.created = get_stack('CreatedAt');\n\t}\n\n\tif (parent_derived !== null) {\n\t\t(parent_derived.children ??= []).push(signal);\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived_safe_equal(fn) {\n\tconst signal = derived(fn);\n\tsignal.equals = safe_equals;\n\treturn signal;\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nfunction destroy_derived_children(derived) {\n\tvar children = derived.children;\n\n\tif (children !== null) {\n\t\tderived.children = null;\n\n\t\tfor (var i = 0; i < children.length; i += 1) {\n\t\t\tvar child = children[i];\n\t\t\tif ((child.f & DERIVED) !== 0) {\n\t\t\t\tdestroy_derived(/** @type {Derived} */ (child));\n\t\t\t} else {\n\t\t\t\tdestroy_effect(/** @type {Effect} */ (child));\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * The currently updating deriveds, used to detect infinite recursion\n * in dev mode and provide a nicer error than 'too much recursion'\n * @type {Derived[]}\n */\nlet stack = [];\n\n/**\n * @param {Derived} derived\n * @returns {Effect | null}\n */\nfunction get_derived_parent_effect(derived) {\n\tvar parent = derived.parent;\n\twhile (parent !== null) {\n\t\tif ((parent.f & DERIVED) === 0) {\n\t\t\treturn /** @type {Effect} */ (parent);\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\treturn null;\n}\n\n/**\n * @template T\n * @param {Derived} derived\n * @returns {T}\n */\nexport function execute_derived(derived) {\n\tvar value;\n\tvar prev_active_effect = active_effect;\n\n\tset_active_effect(get_derived_parent_effect(derived));\n\n\tif (DEV) {\n\t\tlet prev_inspect_effects = inspect_effects;\n\t\tset_inspect_effects(new Set());\n\t\ttry {\n\t\t\tif (stack.includes(derived)) {\n\t\t\t\te.derived_references_self();\n\t\t\t}\n\n\t\t\tstack.push(derived);\n\n\t\t\tdestroy_derived_children(derived);\n\t\t\tvalue = update_reaction(derived);\n\t\t} finally {\n\t\t\tset_active_effect(prev_active_effect);\n\t\t\tset_inspect_effects(prev_inspect_effects);\n\t\t\tstack.pop();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tdestroy_derived_children(derived);\n\t\t\tvalue = update_reaction(derived);\n\t\t} finally {\n\t\t\tset_active_effect(prev_active_effect);\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nexport function update_derived(derived) {\n\tvar value = execute_derived(derived);\n\tvar status =\n\t\t(skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;\n\n\tset_signal_status(derived, status);\n\n\tif (!derived.equals(value)) {\n\t\tderived.v = value;\n\t\tderived.wv = increment_write_version();\n\t}\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nexport function destroy_derived(derived) {\n\tdestroy_derived_children(derived);\n\tremove_reactions(derived, 0);\n\tset_signal_status(derived, DESTROYED);\n\n\tderived.v = derived.children = derived.deps = derived.ctx = derived.reactions = null;\n}\n","/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */\nimport {\n\tcheck_dirtiness,\n\tcomponent_context,\n\tactive_effect,\n\tactive_reaction,\n\tdev_current_component_function,\n\tupdate_effect,\n\tget,\n\tis_destroying_effect,\n\tis_flushing_effect,\n\tremove_reactions,\n\tschedule_effect,\n\tset_active_reaction,\n\tset_is_destroying_effect,\n\tset_is_flushing_effect,\n\tset_signal_status,\n\tuntrack,\n\tskip_reaction,\n\tuntracking\n} from '../runtime.js';\nimport {\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tRENDER_EFFECT,\n\tEFFECT,\n\tDESTROYED,\n\tINERT,\n\tEFFECT_RAN,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tEFFECT_TRANSPARENT,\n\tDERIVED,\n\tUNOWNED,\n\tCLEAN,\n\tINSPECT_EFFECT,\n\tHEAD_EFFECT,\n\tMAYBE_DIRTY,\n\tEFFECT_HAS_DERIVED,\n\tBOUNDARY_EFFECT\n} from '../constants.js';\nimport { set } from './sources.js';\nimport * as e from '../errors.js';\nimport { DEV } from 'esm-env';\nimport { define_property } from '../../shared/utils.js';\nimport { get_next_sibling } from '../dom/operations.js';\nimport { derived, destroy_derived } from './deriveds.js';\n\n/**\n * @param {'$effect' | '$effect.pre' | '$inspect'} rune\n */\nexport function validate_effect(rune) {\n\tif (active_effect === null && active_reaction === null) {\n\t\te.effect_orphan(rune);\n\t}\n\n\tif (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0) {\n\t\te.effect_in_unowned_derived();\n\t}\n\n\tif (is_destroying_effect) {\n\t\te.effect_in_teardown(rune);\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {Effect} parent_effect\n */\nfunction push_effect(effect, parent_effect) {\n\tvar parent_last = parent_effect.last;\n\tif (parent_last === null) {\n\t\tparent_effect.last = parent_effect.first = effect;\n\t} else {\n\t\tparent_last.next = effect;\n\t\teffect.prev = parent_last;\n\t\tparent_effect.last = effect;\n\t}\n}\n\n/**\n * @param {number} type\n * @param {null | (() => void | (() => void))} fn\n * @param {boolean} sync\n * @param {boolean} push\n * @returns {Effect}\n */\nfunction create_effect(type, fn, sync, push = true) {\n\tvar is_root = (type & ROOT_EFFECT) !== 0;\n\tvar parent_effect = active_effect;\n\n\tif (DEV) {\n\t\t// Ensure the parent is never an inspect effect\n\t\twhile (parent_effect !== null && (parent_effect.f & INSPECT_EFFECT) !== 0) {\n\t\t\tparent_effect = parent_effect.parent;\n\t\t}\n\t}\n\n\t/** @type {Effect} */\n\tvar effect = {\n\t\tctx: component_context,\n\t\tdeps: null,\n\t\tderiveds: null,\n\t\tnodes_start: null,\n\t\tnodes_end: null,\n\t\tf: type | DIRTY,\n\t\tfirst: null,\n\t\tfn,\n\t\tlast: null,\n\t\tnext: null,\n\t\tparent: is_root ? null : parent_effect,\n\t\tprev: null,\n\t\tteardown: null,\n\t\ttransitions: null,\n\t\twv: 0\n\t};\n\n\tif (DEV) {\n\t\teffect.component_function = dev_current_component_function;\n\t}\n\n\tif (sync) {\n\t\tvar previously_flushing_effect = is_flushing_effect;\n\n\t\ttry {\n\t\t\tset_is_flushing_effect(true);\n\t\t\tupdate_effect(effect);\n\t\t\teffect.f |= EFFECT_RAN;\n\t\t} catch (e) {\n\t\t\tdestroy_effect(effect);\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tset_is_flushing_effect(previously_flushing_effect);\n\t\t}\n\t} else if (fn !== null) {\n\t\tschedule_effect(effect);\n\t}\n\n\t// if an effect has no dependencies, no DOM and no teardown function,\n\t// don't bother adding it to the effect tree\n\tvar inert =\n\t\tsync &&\n\t\teffect.deps === null &&\n\t\teffect.first === null &&\n\t\teffect.nodes_start === null &&\n\t\teffect.teardown === null &&\n\t\t(effect.f & (EFFECT_HAS_DERIVED | BOUNDARY_EFFECT)) === 0;\n\n\tif (!inert && !is_root && push) {\n\t\tif (parent_effect !== null) {\n\t\t\tpush_effect(effect, parent_effect);\n\t\t}\n\n\t\t// if we're in a derived, add the effect there too\n\t\tif (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {\n\t\t\tvar derived = /** @type {Derived} */ (active_reaction);\n\t\t\t(derived.children ??= []).push(effect);\n\t\t}\n\t}\n\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect.tracking()`\n * @returns {boolean}\n */\nexport function effect_tracking() {\n\tif (active_reaction === null || untracking) {\n\t\treturn false;\n\t}\n\n\t// If it's skipped, that's because we're inside an unowned\n\t// that is not being tracked by another reaction\n\treturn !skip_reaction;\n}\n\n/**\n * @param {() => void} fn\n */\nexport function teardown(fn) {\n\tconst effect = create_effect(RENDER_EFFECT, null, false);\n\tset_signal_status(effect, CLEAN);\n\teffect.teardown = fn;\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect(...)`\n * @param {() => void | (() => void)} fn\n */\nexport function user_effect(fn) {\n\tvalidate_effect('$effect');\n\n\t// Non-nested `$effect(...)` in a component should be deferred\n\t// until the component is mounted\n\tvar defer =\n\t\tactive_effect !== null &&\n\t\t(active_effect.f & BRANCH_EFFECT) !== 0 &&\n\t\tcomponent_context !== null &&\n\t\t!component_context.m;\n\n\tif (DEV) {\n\t\tdefine_property(fn, 'name', {\n\t\t\tvalue: '$effect'\n\t\t});\n\t}\n\n\tif (defer) {\n\t\tvar context = /** @type {ComponentContext} */ (component_context);\n\t\t(context.e ??= []).push({\n\t\t\tfn,\n\t\t\teffect: active_effect,\n\t\t\treaction: active_reaction\n\t\t});\n\t} else {\n\t\tvar signal = effect(fn);\n\t\treturn signal;\n\t}\n}\n\n/**\n * Internal representation of `$effect.pre(...)`\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function user_pre_effect(fn) {\n\tvalidate_effect('$effect.pre');\n\tif (DEV) {\n\t\tdefine_property(fn, 'name', {\n\t\t\tvalue: '$effect.pre'\n\t\t});\n\t}\n\treturn render_effect(fn);\n}\n\n/** @param {() => void | (() => void)} fn */\nexport function inspect_effect(fn) {\n\treturn create_effect(INSPECT_EFFECT, fn, true);\n}\n\n/**\n * Internal representation of `$effect.root(...)`\n * @param {() => void | (() => void)} fn\n * @returns {() => void}\n */\nexport function effect_root(fn) {\n\tconst effect = create_effect(ROOT_EFFECT, fn, true);\n\n\treturn () => {\n\t\tdestroy_effect(effect);\n\t};\n}\n\n/**\n * An effect root whose children can transition out\n * @param {() => void} fn\n * @returns {(options?: { outro?: boolean }) => Promise<void>}\n */\nexport function component_root(fn) {\n\tconst effect = create_effect(ROOT_EFFECT, fn, true);\n\n\treturn (options = {}) => {\n\t\treturn new Promise((fulfil) => {\n\t\t\tif (options.outro) {\n\t\t\t\tpause_effect(effect, () => {\n\t\t\t\t\tdestroy_effect(effect);\n\t\t\t\t\tfulfil(undefined);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdestroy_effect(effect);\n\t\t\t\tfulfil(undefined);\n\t\t\t}\n\t\t});\n\t};\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function effect(fn) {\n\treturn create_effect(EFFECT, fn, false);\n}\n\n/**\n * Internal representation of `$: ..`\n * @param {() => any} deps\n * @param {() => void | (() => void)} fn\n */\nexport function legacy_pre_effect(deps, fn) {\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\t/** @type {{ effect: null | Effect, ran: boolean }} */\n\tvar token = { effect: null, ran: false };\n\tcontext.l.r1.push(token);\n\n\ttoken.effect = render_effect(() => {\n\t\tdeps();\n\n\t\t// If this legacy pre effect has already run before the end of the reset, then\n\t\t// bail out to emulate the same behavior.\n\t\tif (token.ran) return;\n\n\t\ttoken.ran = true;\n\t\tset(context.l.r2, true);\n\t\tuntrack(fn);\n\t});\n}\n\nexport function legacy_pre_effect_reset() {\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\trender_effect(() => {\n\t\tif (!get(context.l.r2)) return;\n\n\t\t// Run dirty `$:` statements\n\t\tfor (var token of context.l.r1) {\n\t\t\tvar effect = token.effect;\n\n\t\t\t// If the effect is CLEAN, then make it MAYBE_DIRTY. This ensures we traverse through\n\t\t\t// the effects dependencies and correctly ensure each dependency is up-to-date.\n\t\t\tif ((effect.f & CLEAN) !== 0) {\n\t\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t\t}\n\n\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\tupdate_effect(effect);\n\t\t\t}\n\n\t\t\ttoken.ran = false;\n\t\t}\n\n\t\tcontext.l.r2.v = false; // set directly to avoid rerunning this effect\n\t});\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function render_effect(fn) {\n\treturn create_effect(RENDER_EFFECT, fn, true);\n}\n\n/**\n * @param {(...expressions: any) => void | (() => void)} fn\n * @param {Array<() => any>} thunks\n * @returns {Effect}\n */\nexport function template_effect(fn, thunks = [], d = derived) {\n\tconst deriveds = thunks.map(d);\n\tconst effect = () => fn(...deriveds.map(get));\n\n\tif (DEV) {\n\t\tdefine_property(effect, 'name', {\n\t\t\tvalue: '{expression}'\n\t\t});\n\t}\n\n\treturn block(effect);\n}\n\n/**\n * @param {(() => void)} fn\n * @param {number} flags\n */\nexport function block(fn, flags = 0) {\n\treturn create_effect(RENDER_EFFECT | BLOCK_EFFECT | flags, fn, true);\n}\n\n/**\n * @param {(() => void)} fn\n * @param {boolean} [push]\n */\nexport function branch(fn, push = true) {\n\treturn create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true, push);\n}\n\n/**\n * @param {Effect} effect\n */\nexport function execute_effect_teardown(effect) {\n\tvar teardown = effect.teardown;\n\tif (teardown !== null) {\n\t\tconst previously_destroying_effect = is_destroying_effect;\n\t\tconst previous_reaction = active_reaction;\n\t\tset_is_destroying_effect(true);\n\t\tset_active_reaction(null);\n\t\ttry {\n\t\t\tteardown.call(null);\n\t\t} finally {\n\t\t\tset_is_destroying_effect(previously_destroying_effect);\n\t\t\tset_active_reaction(previous_reaction);\n\t\t}\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function destroy_effect_deriveds(signal) {\n\tvar deriveds = signal.deriveds;\n\n\tif (deriveds !== null) {\n\t\tsignal.deriveds = null;\n\n\t\tfor (var i = 0; i < deriveds.length; i += 1) {\n\t\t\tdestroy_derived(deriveds[i]);\n\t\t}\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @param {boolean} remove_dom\n * @returns {void}\n */\nexport function destroy_effect_children(signal, remove_dom = false) {\n\tvar effect = signal.first;\n\tsignal.first = signal.last = null;\n\n\twhile (effect !== null) {\n\t\tvar next = effect.next;\n\t\tdestroy_effect(effect, remove_dom);\n\t\teffect = next;\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function destroy_block_effect_children(signal) {\n\tvar effect = signal.first;\n\n\twhile (effect !== null) {\n\t\tvar next = effect.next;\n\t\tif ((effect.f & BRANCH_EFFECT) === 0) {\n\t\t\tdestroy_effect(effect);\n\t\t}\n\t\teffect = next;\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {boolean} [remove_dom]\n * @returns {void}\n */\nexport function destroy_effect(effect, remove_dom = true) {\n\tvar removed = false;\n\n\tif ((remove_dom || (effect.f & HEAD_EFFECT) !== 0) && effect.nodes_start !== null) {\n\t\t/** @type {TemplateNode | null} */\n\t\tvar node = effect.nodes_start;\n\t\tvar end = effect.nodes_end;\n\n\t\twhile (node !== null) {\n\t\t\t/** @type {TemplateNode | null} */\n\t\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n\n\t\t\tnode.remove();\n\t\t\tnode = next;\n\t\t}\n\n\t\tremoved = true;\n\t}\n\n\tdestroy_effect_children(effect, remove_dom && !removed);\n\tdestroy_effect_deriveds(effect);\n\tremove_reactions(effect, 0);\n\tset_signal_status(effect, DESTROYED);\n\n\tvar transitions = effect.transitions;\n\n\tif (transitions !== null) {\n\t\tfor (const transition of transitions) {\n\t\t\ttransition.stop();\n\t\t}\n\t}\n\n\texecute_effect_teardown(effect);\n\n\tvar parent = effect.parent;\n\n\t// If the parent doesn't have any children, then skip this work altogether\n\tif (parent !== null && parent.first !== null) {\n\t\tunlink_effect(effect);\n\t}\n\n\tif (DEV) {\n\t\teffect.component_function = null;\n\t}\n\n\t// `first` and `child` are nulled out in destroy_effect_children\n\t// we don't null out `parent` so that error propagation can work correctly\n\teffect.next =\n\t\teffect.prev =\n\t\teffect.teardown =\n\t\teffect.ctx =\n\t\teffect.deps =\n\t\teffect.fn =\n\t\teffect.nodes_start =\n\t\teffect.nodes_end =\n\t\t\tnull;\n}\n\n/**\n * Detach an effect from the effect tree, freeing up memory and\n * reducing the amount of work that happens on subsequent traversals\n * @param {Effect} effect\n */\nexport function unlink_effect(effect) {\n\tvar parent = effect.parent;\n\tvar prev = effect.prev;\n\tvar next = effect.next;\n\n\tif (prev !== null) prev.next = next;\n\tif (next !== null) next.prev = prev;\n\n\tif (parent !== null) {\n\t\tif (parent.first === effect) parent.first = next;\n\t\tif (parent.last === effect) parent.last = prev;\n\t}\n}\n\n/**\n * When a block effect is removed, we don't immediately destroy it or yank it\n * out of the DOM, because it might have transitions. Instead, we 'pause' it.\n * It stays around (in memory, and in the DOM) until outro transitions have\n * completed, and if the state change is reversed then we _resume_ it.\n * A paused effect does not update, and the DOM subtree becomes inert.\n * @param {Effect} effect\n * @param {() => void} [callback]\n */\nexport function pause_effect(effect, callback) {\n\t/** @type {TransitionManager[]} */\n\tvar transitions = [];\n\n\tpause_children(effect, transitions, true);\n\n\trun_out_transitions(transitions, () => {\n\t\tdestroy_effect(effect);\n\t\tif (callback) callback();\n\t});\n}\n\n/**\n * @param {TransitionManager[]} transitions\n * @param {() => void} fn\n */\nexport function run_out_transitions(transitions, fn) {\n\tvar remaining = transitions.length;\n\tif (remaining > 0) {\n\t\tvar check = () => --remaining || fn();\n\t\tfor (var transition of transitions) {\n\t\t\ttransition.out(check);\n\t\t}\n\t} else {\n\t\tfn();\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {TransitionManager[]} transitions\n * @param {boolean} local\n */\nexport function pause_children(effect, transitions, local) {\n\tif ((effect.f & INERT) !== 0) return;\n\teffect.f ^= INERT;\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransitions.push(transition);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call pause_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tpause_children(child, transitions, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n}\n\n/**\n * The opposite of `pause_effect`. We call this if (for example)\n * `x` becomes falsy then truthy: `{#if x}...{/if}`\n * @param {Effect} effect\n */\nexport function resume_effect(effect) {\n\tresume_children(effect, true);\n}\n\n/**\n * @param {Effect} effect\n * @param {boolean} local\n */\nfunction resume_children(effect, local) {\n\tif ((effect.f & INERT) === 0) return;\n\teffect.f ^= INERT;\n\n\t// Ensure the effect is marked as clean again so that any dirty child\n\t// effects can schedule themselves for execution\n\tif ((effect.f & CLEAN) === 0) {\n\t\teffect.f ^= CLEAN;\n\t}\n\n\t// If a dependency of this effect changed while it was paused,\n\t// schedule the effect to update\n\tif (check_dirtiness(effect)) {\n\t\tset_signal_status(effect, DIRTY);\n\t\tschedule_effect(effect);\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call resume_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tresume_children(child, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransition.in();\n\t\t\t}\n\t\t}\n\t}\n}\n","/* This file is generated by scripts/process-messages/index.js. Do not edit! */\n\nimport { DEV } from 'esm-env';\n\n/**\n * Cannot use `{@render children(...)}` if the parent component uses `let:` directives. Consider using a named snippet instead\n * @returns {never}\n */\nexport function invalid_default_snippet() {\n\tif (DEV) {\n\t\tconst error = new Error(`invalid_default_snippet\\nCannot use \\`{@render children(...)}\\` if the parent component uses \\`let:\\` directives. Consider using a named snippet instead\\nhttps://svelte.dev/e/invalid_default_snippet`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/invalid_default_snippet`);\n\t}\n}\n\n/**\n * `%name%(...)` can only be used during component initialisation\n * @param {string} name\n * @returns {never}\n */\nexport function lifecycle_outside_component(name) {\n\tif (DEV) {\n\t\tconst error = new Error(`lifecycle_outside_component\\n\\`${name}(...)\\` can only be used during component initialisation\\nhttps://svelte.dev/e/lifecycle_outside_component`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/lifecycle_outside_component`);\n\t}\n}\n\n/**\n * `%name%` is not a store with a `subscribe` method\n * @param {string} name\n * @returns {never}\n */\nexport function store_invalid_shape(name) {\n\tif (DEV) {\n\t\tconst error = new Error(`store_invalid_shape\\n\\`${name}\\` is not a store with a \\`subscribe\\` method\\nhttps://svelte.dev/e/store_invalid_shape`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/store_invalid_shape`);\n\t}\n}\n\n/**\n * The `this` prop on `<svelte:element>` must be a string, if defined\n * @returns {never}\n */\nexport function svelte_element_invalid_this_value() {\n\tif (DEV) {\n\t\tconst error = new Error(`svelte_element_invalid_this_value\\nThe \\`this\\` prop on \\`<svelte:element>\\` must be a string, if defined\\nhttps://svelte.dev/e/svelte_element_invalid_this_value`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/svelte_element_invalid_this_value`);\n\t}\n}","/** @import { ComponentContext, Derived, Effect, Reaction, Signal, Source, Value } from '#client' */\nimport { DEV } from 'esm-env';\nimport { define_property, get_descriptors, get_prototype_of, index_of } from '../shared/utils.js';\nimport {\n\tdestroy_block_effect_children,\n\tdestroy_effect_children,\n\tdestroy_effect_deriveds,\n\teffect,\n\texecute_effect_teardown,\n\tunlink_effect\n} from './reactivity/effects.js';\nimport {\n\tEFFECT,\n\tRENDER_EFFECT,\n\tDIRTY,\n\tMAYBE_DIRTY,\n\tCLEAN,\n\tDERIVED,\n\tUNOWNED,\n\tDESTROYED,\n\tINERT,\n\tBRANCH_EFFECT,\n\tSTATE_SYMBOL,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tLEGACY_DERIVED_PROP,\n\tDISCONNECTED,\n\tBOUNDARY_EFFECT\n} from './constants.js';\nimport { flush_tasks } from './dom/task.js';\nimport { add_owner } from './dev/ownership.js';\nimport { internal_set, set, source } from './reactivity/sources.js';\nimport { destroy_derived, execute_derived, update_derived } from './reactivity/deriveds.js';\nimport * as e from './errors.js';\nimport { lifecycle_outside_component } from '../shared/errors.js';\nimport { FILENAME } from '../../constants.js';\nimport { legacy_mode_flag, tracing_mode_flag } from '../flags/index.js';\nimport { tracing_expressions, get_stack } from './dev/tracing.js';\n\nconst FLUSH_MICROTASK = 0;\nconst FLUSH_SYNC = 1;\n// Used for DEV time error handling\n/** @param {WeakSet<Error>} value */\nconst handled_errors = new WeakSet();\nexport let is_throwing_error = false;\n\n// Used for controlling the flush of effects.\nlet scheduler_mode = FLUSH_MICROTASK;\n// Used for handling scheduling\nlet is_micro_task_queued = false;\n\n/** @type {Effect | null} */\nlet last_scheduled_effect = null;\n\nexport let is_flushing_effect = false;\nexport let is_destroying_effect = false;\n\n/** @param {boolean} value */\nexport function set_is_flushing_effect(value) {\n\tis_flushing_effect = value;\n}\n\n/** @param {boolean} value */\nexport function set_is_destroying_effect(value) {\n\tis_destroying_effect = value;\n}\n\n// Handle effect queues\n\n/** @type {Effect[]} */\nlet queued_root_effects = [];\n\nlet flush_count = 0;\n/** @type {Effect[]} Stack of effects, dev only */\nlet dev_effect_stack = [];\n// Handle signal reactivity tree dependencies and reactions\n\n/** @type {null | Reaction} */\nexport let active_reaction = null;\n\nexport let untracking = false;\n\n/** @param {null | Reaction} reaction */\nexport function set_active_reaction(reaction) {\n\tactive_reaction = reaction;\n}\n\n/** @type {null | Effect} */\nexport let active_effect = null;\n\n/** @param {null | Effect} effect */\nexport function set_active_effect(effect) {\n\tactive_effect = effect;\n}\n\n/**\n * When sources are created within a derived, we record them so that we can safely allow\n * local mutations to these sources without the side-effect error being invoked unnecessarily.\n * @type {null | Source[]}\n */\nexport let derived_sources = null;\n\n/**\n * @param {Source[] | null} sources\n */\nexport function set_derived_sources(sources) {\n\tderived_sources = sources;\n}\n\n/**\n * The dependencies of the reaction that is currently being executed. In many cases,\n * the dependencies are unchanged between runs, and so this will be `null` unless\n * and until a new dependency is accessed ‚Äî we track this via `skipped_deps`\n * @type {null | Value[]}\n */\nexport let new_deps = null;\n\nlet skipped_deps = 0;\n\n/**\n * Tracks writes that the effect it's executed in doesn't listen to yet,\n * so that the dependency can be added to the effect later on if it then reads it\n * @type {null | Source[]}\n */\nexport let untracked_writes = null;\n\n/** @param {null | Source[]} value */\nexport function set_untracked_writes(value) {\n\tuntracked_writes = value;\n}\n\n/**\n * @type {number} Used by sources and deriveds for handling updates.\n * Version starts from 1 so that unowned deriveds differentiate between a created effect and a run one for tracing\n **/\nlet write_version = 1;\n\n/** @type {number} Used to version each read of a source of derived to avoid duplicating depedencies inside a reaction */\nlet read_version = 0;\n\n// If we are working with a get() chain that has no active container,\n// to prevent memory leaks, we skip adding the reaction.\nexport let skip_reaction = false;\n// Handle collecting all signals which are read during a specific time frame\n/** @type {Set<Value> | null} */\nexport let captured_signals = null;\n\n/** @param {Set<Value> | null} value */\nexport function set_captured_signals(value) {\n\tcaptured_signals = value;\n}\n\n// Handling runtime component context\n/** @type {ComponentContext | null} */\nexport let component_context = null;\n\n/** @param {ComponentContext | null} context */\nexport function set_component_context(context) {\n\tcomponent_context = context;\n}\n\n/**\n * The current component function. Different from current component context:\n * ```html\n * <!-- App.svelte -->\n * <Foo>\n *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->\n * </Foo>\n * ```\n * @type {ComponentContext['function']}\n */\nexport let dev_current_component_function = null;\n\n/** @param {ComponentContext['function']} fn */\nexport function set_dev_current_component_function(fn) {\n\tdev_current_component_function = fn;\n}\n\nexport function increment_write_version() {\n\treturn ++write_version;\n}\n\n/** @returns {boolean} */\nexport function is_runes() {\n\treturn !legacy_mode_flag || (component_context !== null && component_context.l === null);\n}\n\n/**\n * Determines whether a derived or effect is dirty.\n * If it is MAYBE_DIRTY, will set the status to CLEAN\n * @param {Reaction} reaction\n * @returns {boolean}\n */\nexport function check_dirtiness(reaction) {\n\tvar flags = reaction.f;\n\n\tif ((flags & DIRTY) !== 0) {\n\t\treturn true;\n\t}\n\n\tif ((flags & MAYBE_DIRTY) !== 0) {\n\t\tvar dependencies = reaction.deps;\n\t\tvar is_unowned = (flags & UNOWNED) !== 0;\n\n\t\tif (dependencies !== null) {\n\t\t\tvar i;\n\t\t\tvar dependency;\n\t\t\tvar is_disconnected = (flags & DISCONNECTED) !== 0;\n\t\t\tvar is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction;\n\t\t\tvar length = dependencies.length;\n\n\t\t\t// If we are working with a disconnected or an unowned signal that is now connected (due to an active effect)\n\t\t\t// then we need to re-connect the reaction to the dependency\n\t\t\tif (is_disconnected || is_unowned_connected) {\n\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\tdependency = dependencies[i];\n\n\t\t\t\t\t// We always re-add all reactions (even duplicates) if the derived was\n\t\t\t\t\t// previously disconnected\n\t\t\t\t\tif (is_disconnected || !dependency?.reactions?.includes(reaction)) {\n\t\t\t\t\t\t(dependency.reactions ??= []).push(reaction);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (is_disconnected) {\n\t\t\t\t\treaction.f ^= DISCONNECTED;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\tdependency = dependencies[i];\n\n\t\t\t\tif (check_dirtiness(/** @type {Derived} */ (dependency))) {\n\t\t\t\t\tupdate_derived(/** @type {Derived} */ (dependency));\n\t\t\t\t}\n\n\t\t\t\tif (dependency.wv > reaction.wv) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Unowned signals should never be marked as clean unless they\n\t\t// are used within an active_effect without skip_reaction\n\t\tif (!is_unowned || (active_effect !== null && !skip_reaction)) {\n\t\t\tset_signal_status(reaction, CLEAN);\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {unknown} error\n * @param {Effect} effect\n */\nfunction propagate_error(error, effect) {\n\t/** @type {Effect | null} */\n\tvar current = effect;\n\n\twhile (current !== null) {\n\t\tif ((current.f & BOUNDARY_EFFECT) !== 0) {\n\t\t\ttry {\n\t\t\t\t// @ts-expect-error\n\t\t\t\tcurrent.fn(error);\n\t\t\t\treturn;\n\t\t\t} catch {\n\t\t\t\t// Remove boundary flag from effect\n\t\t\t\tcurrent.f ^= BOUNDARY_EFFECT;\n\t\t\t}\n\t\t}\n\n\t\tcurrent = current.parent;\n\t}\n\n\tis_throwing_error = false;\n\tthrow error;\n}\n\n/**\n * @param {Effect} effect\n */\nfunction should_rethrow_error(effect) {\n\treturn (\n\t\t(effect.f & DESTROYED) === 0 &&\n\t\t(effect.parent === null || (effect.parent.f & BOUNDARY_EFFECT) === 0)\n\t);\n}\n\nexport function reset_is_throwing_error() {\n\tis_throwing_error = false;\n}\n\n/**\n * @param {unknown} error\n * @param {Effect} effect\n * @param {Effect | null} previous_effect\n * @param {ComponentContext | null} component_context\n */\nexport function handle_error(error, effect, previous_effect, component_context) {\n\tif (is_throwing_error) {\n\t\tif (previous_effect === null) {\n\t\t\tis_throwing_error = false;\n\t\t}\n\n\t\tif (should_rethrow_error(effect)) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn;\n\t}\n\n\tif (previous_effect !== null) {\n\t\tis_throwing_error = true;\n\t}\n\n\tif (\n\t\t!DEV ||\n\t\tcomponent_context === null ||\n\t\t!(error instanceof Error) ||\n\t\thandled_errors.has(error)\n\t) {\n\t\tpropagate_error(error, effect);\n\t\treturn;\n\t}\n\n\thandled_errors.add(error);\n\n\tconst component_stack = [];\n\n\tconst effect_name = effect.fn?.name;\n\n\tif (effect_name) {\n\t\tcomponent_stack.push(effect_name);\n\t}\n\n\t/** @type {ComponentContext | null} */\n\tlet current_context = component_context;\n\n\twhile (current_context !== null) {\n\t\tif (DEV) {\n\t\t\t/** @type {string} */\n\t\t\tvar filename = current_context.function?.[FILENAME];\n\n\t\t\tif (filename) {\n\t\t\t\tconst file = filename.split('/').pop();\n\t\t\t\tcomponent_stack.push(file);\n\t\t\t}\n\t\t}\n\n\t\tcurrent_context = current_context.p;\n\t}\n\n\tconst indent = /Firefox/.test(navigator.userAgent) ? '  ' : '\\t';\n\tdefine_property(error, 'message', {\n\t\tvalue: error.message + `\\n${component_stack.map((name) => `\\n${indent}in ${name}`).join('')}\\n`\n\t});\n\tdefine_property(error, 'component_stack', {\n\t\tvalue: component_stack\n\t});\n\n\tconst stack = error.stack;\n\n\t// Filter out internal files from callstack\n\tif (stack) {\n\t\tconst lines = stack.split('\\n');\n\t\tconst new_lines = [];\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tconst line = lines[i];\n\t\t\tif (line.includes('svelte/src/internal')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnew_lines.push(line);\n\t\t}\n\t\tdefine_property(error, 'stack', {\n\t\t\tvalue: new_lines.join('\\n')\n\t\t});\n\t}\n\n\tpropagate_error(error, effect);\n\n\tif (should_rethrow_error(effect)) {\n\t\tthrow error;\n\t}\n}\n\n/**\n * @param {Value} signal\n * @param {Effect} effect\n * @param {number} [depth]\n */\nfunction schedule_possible_effect_self_invalidation(signal, effect, depth = 0) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tfor (var i = 0; i < reactions.length; i++) {\n\t\tvar reaction = reactions[i];\n\t\tif ((reaction.f & DERIVED) !== 0) {\n\t\t\tschedule_possible_effect_self_invalidation(\n\t\t\t\t/** @type {Derived} */ (reaction),\n\t\t\t\teffect,\n\t\t\t\tdepth + 1\n\t\t\t);\n\t\t} else if (effect === reaction) {\n\t\t\tif (depth === 0) {\n\t\t\t\tset_signal_status(reaction, DIRTY);\n\t\t\t} else if ((reaction.f & CLEAN) !== 0) {\n\t\t\t\tset_signal_status(reaction, MAYBE_DIRTY);\n\t\t\t}\n\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\n\t\t}\n\t}\n}\n\n/**\n * @template V\n * @param {Reaction} reaction\n * @returns {V}\n */\nexport function update_reaction(reaction) {\n\tvar previous_deps = new_deps;\n\tvar previous_skipped_deps = skipped_deps;\n\tvar previous_untracked_writes = untracked_writes;\n\tvar previous_reaction = active_reaction;\n\tvar previous_skip_reaction = skip_reaction;\n\tvar prev_derived_sources = derived_sources;\n\tvar previous_component_context = component_context;\n\tvar previous_untracking = untracking;\n\tvar flags = reaction.f;\n\n\tnew_deps = /** @type {null | Value[]} */ (null);\n\tskipped_deps = 0;\n\tuntracked_writes = null;\n\tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n\tskip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0;\n\tderived_sources = null;\n\tcomponent_context = reaction.ctx;\n\tuntracking = false;\n\tread_version++;\n\n\ttry {\n\t\tvar result = /** @type {Function} */ (0, reaction.fn)();\n\t\tvar deps = reaction.deps;\n\n\t\tif (new_deps !== null) {\n\t\t\tvar i;\n\n\t\t\tremove_reactions(reaction, skipped_deps);\n\n\t\t\tif (deps !== null && skipped_deps > 0) {\n\t\t\t\tdeps.length = skipped_deps + new_deps.length;\n\t\t\t\tfor (i = 0; i < new_deps.length; i++) {\n\t\t\t\t\tdeps[skipped_deps + i] = new_deps[i];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treaction.deps = deps = new_deps;\n\t\t\t}\n\n\t\t\tif (!skip_reaction) {\n\t\t\t\tfor (i = skipped_deps; i < deps.length; i++) {\n\t\t\t\t\t(deps[i].reactions ??= []).push(reaction);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (deps !== null && skipped_deps < deps.length) {\n\t\t\tremove_reactions(reaction, skipped_deps);\n\t\t\tdeps.length = skipped_deps;\n\t\t}\n\n\t\t// If we're inside an effect and we have untracked writes, then we need to\n\t\t// ensure that if any of those untracked writes result in re-invalidation\n\t\t// of the current effect, then that happens accordingly\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tuntracked_writes !== null &&\n\t\t\t(reaction.f & (DERIVED | MAYBE_DIRTY | DIRTY)) === 0\n\t\t) {\n\t\t\tfor (i = 0; i < /** @type {Source[]} */ (untracked_writes).length; i++) {\n\t\t\t\tschedule_possible_effect_self_invalidation(\n\t\t\t\t\tuntracked_writes[i],\n\t\t\t\t\t/** @type {Effect} */ (reaction)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// If we are returning to an previous reaction then\n\t\t// we need to increment the read version to ensure that\n\t\t// any dependencies in this reaction aren't marked with\n\t\t// the same version\n\t\tif (previous_reaction !== null) {\n\t\t\tread_version++;\n\t\t}\n\n\t\treturn result;\n\t} finally {\n\t\tnew_deps = previous_deps;\n\t\tskipped_deps = previous_skipped_deps;\n\t\tuntracked_writes = previous_untracked_writes;\n\t\tactive_reaction = previous_reaction;\n\t\tskip_reaction = previous_skip_reaction;\n\t\tderived_sources = prev_derived_sources;\n\t\tcomponent_context = previous_component_context;\n\t\tuntracking = previous_untracking;\n\t}\n}\n\n/**\n * @template V\n * @param {Reaction} signal\n * @param {Value<V>} dependency\n * @returns {void}\n */\nfunction remove_reaction(signal, dependency) {\n\tlet reactions = dependency.reactions;\n\tif (reactions !== null) {\n\t\tvar index = index_of.call(reactions, signal);\n\t\tif (index !== -1) {\n\t\t\tvar new_length = reactions.length - 1;\n\t\t\tif (new_length === 0) {\n\t\t\t\treactions = dependency.reactions = null;\n\t\t\t} else {\n\t\t\t\t// Swap with last element and then remove.\n\t\t\t\treactions[index] = reactions[new_length];\n\t\t\t\treactions.pop();\n\t\t\t}\n\t\t}\n\t}\n\t// If the derived has no reactions, then we can disconnect it from the graph,\n\t// allowing it to either reconnect in the future, or be GC'd by the VM.\n\tif (\n\t\treactions === null &&\n\t\t(dependency.f & DERIVED) !== 0 &&\n\t\t// Destroying a child effect while updating a parent effect can cause a dependency to appear\n\t\t// to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`\n\t\t// allows us to skip the expensive work of disconnecting and immediately reconnecting it\n\t\t(new_deps === null || !new_deps.includes(dependency))\n\t) {\n\t\tset_signal_status(dependency, MAYBE_DIRTY);\n\t\t// If we are working with a derived that is owned by an effect, then mark it as being\n\t\t// disconnected.\n\t\tif ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {\n\t\t\tdependency.f ^= DISCONNECTED;\n\t\t}\n\t\tremove_reactions(/** @type {Derived} **/ (dependency), 0);\n\t}\n}\n\n/**\n * @param {Reaction} signal\n * @param {number} start_index\n * @returns {void}\n */\nexport function remove_reactions(signal, start_index) {\n\tvar dependencies = signal.deps;\n\tif (dependencies === null) return;\n\n\tfor (var i = start_index; i < dependencies.length; i++) {\n\t\tremove_reaction(signal, dependencies[i]);\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @returns {void}\n */\nexport function update_effect(effect) {\n\tvar flags = effect.f;\n\n\tif ((flags & DESTROYED) !== 0) {\n\t\treturn;\n\t}\n\n\tset_signal_status(effect, CLEAN);\n\n\tvar previous_effect = active_effect;\n\tvar previous_component_context = component_context;\n\n\tactive_effect = effect;\n\n\tif (DEV) {\n\t\tvar previous_component_fn = dev_current_component_function;\n\t\tdev_current_component_function = effect.component_function;\n\t}\n\n\ttry {\n\t\tif ((flags & BLOCK_EFFECT) !== 0) {\n\t\t\tdestroy_block_effect_children(effect);\n\t\t} else {\n\t\t\tdestroy_effect_children(effect);\n\t\t}\n\t\tdestroy_effect_deriveds(effect);\n\n\t\texecute_effect_teardown(effect);\n\t\tvar teardown = update_reaction(effect);\n\t\teffect.teardown = typeof teardown === 'function' ? teardown : null;\n\t\teffect.wv = write_version;\n\n\t\tvar deps = effect.deps;\n\n\t\t// In DEV, we need to handle a case where $inspect.trace() might\n\t\t// incorrectly state a source dependency has not changed when it has.\n\t\t// That's beacuse that source was changed by the same effect, causing\n\t\t// the versions to match. We can avoid this by incrementing the version\n\t\tif (DEV && tracing_mode_flag && (effect.f & DIRTY) !== 0 && deps !== null) {\n\t\t\tfor (let i = 0; i < deps.length; i++) {\n\t\t\t\tvar dep = deps[i];\n\t\t\t\tif (dep.trace_need_increase) {\n\t\t\t\t\tdep.wv = increment_write_version();\n\t\t\t\t\tdep.trace_need_increase = undefined;\n\t\t\t\t\tdep.trace_v = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (DEV) {\n\t\t\tdev_effect_stack.push(effect);\n\t\t}\n\t} catch (error) {\n\t\thandle_error(error, effect, previous_effect, previous_component_context || effect.ctx);\n\t} finally {\n\t\tactive_effect = previous_effect;\n\n\t\tif (DEV) {\n\t\t\tdev_current_component_function = previous_component_fn;\n\t\t}\n\t}\n}\n\nfunction log_effect_stack() {\n\t// eslint-disable-next-line no-console\n\tconsole.error(\n\t\t'Last ten effects were: ',\n\t\tdev_effect_stack.slice(-10).map((d) => d.fn)\n\t);\n\tdev_effect_stack = [];\n}\n\nfunction infinite_loop_guard() {\n\tif (flush_count > 1000) {\n\t\tflush_count = 0;\n\t\ttry {\n\t\t\te.effect_update_depth_exceeded();\n\t\t} catch (error) {\n\t\t\tif (DEV) {\n\t\t\t\t// stack is garbage, ignore. Instead add a console.error message.\n\t\t\t\tdefine_property(error, 'stack', {\n\t\t\t\t\tvalue: ''\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Try and handle the error so it can be caught at a boundary, that's\n\t\t\t// if there's an effect available from when it was last scheduled\n\t\t\tif (last_scheduled_effect !== null) {\n\t\t\t\tif (DEV) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\thandle_error(error, last_scheduled_effect, null, null);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// Only log the effect stack if the error is re-thrown\n\t\t\t\t\t\tlog_effect_stack();\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thandle_error(error, last_scheduled_effect, null, null);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (DEV) {\n\t\t\t\t\tlog_effect_stack();\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\tflush_count++;\n}\n\n/**\n * @param {Array<Effect>} root_effects\n * @returns {void}\n */\nfunction flush_queued_root_effects(root_effects) {\n\tvar length = root_effects.length;\n\tif (length === 0) {\n\t\treturn;\n\t}\n\tinfinite_loop_guard();\n\n\tvar previously_flushing_effect = is_flushing_effect;\n\tis_flushing_effect = true;\n\n\ttry {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tvar effect = root_effects[i];\n\n\t\t\tif ((effect.f & CLEAN) === 0) {\n\t\t\t\teffect.f ^= CLEAN;\n\t\t\t}\n\n\t\t\t/** @type {Effect[]} */\n\t\t\tvar collected_effects = [];\n\n\t\t\tprocess_effects(effect, collected_effects);\n\t\t\tflush_queued_effects(collected_effects);\n\t\t}\n\t} finally {\n\t\tis_flushing_effect = previously_flushing_effect;\n\t}\n}\n\n/**\n * @param {Array<Effect>} effects\n * @returns {void}\n */\nfunction flush_queued_effects(effects) {\n\tvar length = effects.length;\n\tif (length === 0) return;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar effect = effects[i];\n\n\t\tif ((effect.f & (DESTROYED | INERT)) === 0) {\n\t\t\ttry {\n\t\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\t\tupdate_effect(effect);\n\n\t\t\t\t\t// Effects with no dependencies or teardown do not get added to the effect tree.\n\t\t\t\t\t// Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we\n\t\t\t\t\t// don't know if we need to keep them until they are executed. Doing the check\n\t\t\t\t\t// here (rather than in `update_effect`) allows us to skip the work for\n\t\t\t\t\t// immediate effects.\n\t\t\t\t\tif (effect.deps === null && effect.first === null && effect.nodes_start === null) {\n\t\t\t\t\t\tif (effect.teardown === null) {\n\t\t\t\t\t\t\t// remove this effect from the graph\n\t\t\t\t\t\t\tunlink_effect(effect);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// keep the effect in the graph, but free up some memory\n\t\t\t\t\t\t\teffect.fn = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\thandle_error(error, effect, null, effect.ctx);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction process_deferred() {\n\tis_micro_task_queued = false;\n\tif (flush_count > 1001) {\n\t\treturn;\n\t}\n\tconst previous_queued_root_effects = queued_root_effects;\n\tqueued_root_effects = [];\n\tflush_queued_root_effects(previous_queued_root_effects);\n\n\tif (!is_micro_task_queued) {\n\t\tflush_count = 0;\n\t\tlast_scheduled_effect = null;\n\t\tif (DEV) {\n\t\t\tdev_effect_stack = [];\n\t\t}\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function schedule_effect(signal) {\n\tif (scheduler_mode === FLUSH_MICROTASK) {\n\t\tif (!is_micro_task_queued) {\n\t\t\tis_micro_task_queued = true;\n\t\t\tqueueMicrotask(process_deferred);\n\t\t}\n\t}\n\n\tlast_scheduled_effect = signal;\n\n\tvar effect = signal;\n\n\twhile (effect.parent !== null) {\n\t\teffect = effect.parent;\n\t\tvar flags = effect.f;\n\n\t\tif ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {\n\t\t\tif ((flags & CLEAN) === 0) return;\n\t\t\teffect.f ^= CLEAN;\n\t\t}\n\t}\n\n\tqueued_root_effects.push(effect);\n}\n\n/**\n *\n * This function both runs render effects and collects user effects in topological order\n * from the starting effect passed in. Effects will be collected when they match the filtered\n * bitwise flag passed in only. The collected effects array will be populated with all the user\n * effects to be flushed.\n *\n * @param {Effect} effect\n * @param {Effect[]} collected_effects\n * @returns {void}\n */\nfunction process_effects(effect, collected_effects) {\n\tvar current_effect = effect.first;\n\tvar effects = [];\n\n\tmain_loop: while (current_effect !== null) {\n\t\tvar flags = current_effect.f;\n\t\tvar is_branch = (flags & BRANCH_EFFECT) !== 0;\n\t\tvar is_skippable_branch = is_branch && (flags & CLEAN) !== 0;\n\t\tvar sibling = current_effect.next;\n\n\t\tif (!is_skippable_branch && (flags & INERT) === 0) {\n\t\t\tif ((flags & RENDER_EFFECT) !== 0) {\n\t\t\t\tif (is_branch) {\n\t\t\t\t\tcurrent_effect.f ^= CLEAN;\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (check_dirtiness(current_effect)) {\n\t\t\t\t\t\t\tupdate_effect(current_effect);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\thandle_error(error, current_effect, null, current_effect.ctx);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar child = current_effect.first;\n\n\t\t\t\tif (child !== null) {\n\t\t\t\t\tcurrent_effect = child;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if ((flags & EFFECT) !== 0) {\n\t\t\t\teffects.push(current_effect);\n\t\t\t}\n\t\t}\n\n\t\tif (sibling === null) {\n\t\t\tlet parent = current_effect.parent;\n\n\t\t\twhile (parent !== null) {\n\t\t\t\tif (effect === parent) {\n\t\t\t\t\tbreak main_loop;\n\t\t\t\t}\n\t\t\t\tvar parent_sibling = parent.next;\n\t\t\t\tif (parent_sibling !== null) {\n\t\t\t\t\tcurrent_effect = parent_sibling;\n\t\t\t\t\tcontinue main_loop;\n\t\t\t\t}\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\t\t}\n\n\t\tcurrent_effect = sibling;\n\t}\n\n\t// We might be dealing with many effects here, far more than can be spread into\n\t// an array push call (callstack overflow). So let's deal with each effect in a loop.\n\tfor (var i = 0; i < effects.length; i++) {\n\t\tchild = effects[i];\n\t\tcollected_effects.push(child);\n\t\tprocess_effects(child, collected_effects);\n\t}\n}\n\n/**\n * Internal version of `flushSync` with the option to not flush previous effects.\n * Returns the result of the passed function, if given.\n * @param {() => any} [fn]\n * @returns {any}\n */\nexport function flush_sync(fn) {\n\tvar previous_scheduler_mode = scheduler_mode;\n\tvar previous_queued_root_effects = queued_root_effects;\n\n\ttry {\n\t\tinfinite_loop_guard();\n\n\t\t/** @type {Effect[]} */\n\t\tconst root_effects = [];\n\n\t\tscheduler_mode = FLUSH_SYNC;\n\t\tqueued_root_effects = root_effects;\n\t\tis_micro_task_queued = false;\n\n\t\tflush_queued_root_effects(previous_queued_root_effects);\n\n\t\tvar result = fn?.();\n\n\t\tflush_tasks();\n\t\tif (queued_root_effects.length > 0 || root_effects.length > 0) {\n\t\t\tflush_sync();\n\t\t}\n\n\t\tflush_count = 0;\n\t\tlast_scheduled_effect = null;\n\t\tif (DEV) {\n\t\t\tdev_effect_stack = [];\n\t\t}\n\n\t\treturn result;\n\t} finally {\n\t\tscheduler_mode = previous_scheduler_mode;\n\t\tqueued_root_effects = previous_queued_root_effects;\n\t}\n}\n\n/**\n * Returns a promise that resolves once any pending state changes have been applied.\n * @returns {Promise<void>}\n */\nexport async function tick() {\n\tawait Promise.resolve();\n\t// By calling flush_sync we guarantee that any pending state changes are applied after one tick.\n\t// TODO look into whether we can make flushing subsequent updates synchronously in the future.\n\tflush_sync();\n}\n\n/**\n * @template V\n * @param {Value<V>} signal\n * @returns {V}\n */\nexport function get(signal) {\n\tvar flags = signal.f;\n\tvar is_derived = (flags & DERIVED) !== 0;\n\n\t// If the derived is destroyed, just execute it again without retaining\n\t// its memoisation properties as the derived is stale\n\tif (is_derived && (flags & DESTROYED) !== 0) {\n\t\tvar value = execute_derived(/** @type {Derived} */ (signal));\n\t\t// Ensure the derived remains destroyed\n\t\tdestroy_derived(/** @type {Derived} */ (signal));\n\t\treturn value;\n\t}\n\n\tif (captured_signals !== null) {\n\t\tcaptured_signals.add(signal);\n\t}\n\n\t// Register the dependency on the current reaction signal.\n\tif (active_reaction !== null && !untracking) {\n\t\tif (derived_sources !== null && derived_sources.includes(signal)) {\n\t\t\te.state_unsafe_local_read();\n\t\t}\n\t\tvar deps = active_reaction.deps;\n\t\tif (signal.rv < read_version) {\n\t\t\tsignal.rv = read_version;\n\t\t\t// If the signal is accessing the same dependencies in the same\n\t\t\t// order as it did last time, increment `skipped_deps`\n\t\t\t// rather than updating `new_deps`, which creates GC cost\n\t\t\tif (new_deps === null && deps !== null && deps[skipped_deps] === signal) {\n\t\t\t\tskipped_deps++;\n\t\t\t} else if (new_deps === null) {\n\t\t\t\tnew_deps = [signal];\n\t\t\t} else {\n\t\t\t\tnew_deps.push(signal);\n\t\t\t}\n\t\t}\n\t} else if (is_derived && /** @type {Derived} */ (signal).deps === null) {\n\t\tvar derived = /** @type {Derived} */ (signal);\n\t\tvar parent = derived.parent;\n\t\tvar target = derived;\n\n\t\twhile (parent !== null) {\n\t\t\t// Attach the derived to the nearest parent effect, if there are deriveds\n\t\t\t// in between then we also need to attach them too\n\t\t\tif ((parent.f & DERIVED) !== 0) {\n\t\t\t\tvar parent_derived = /** @type {Derived} */ (parent);\n\n\t\t\t\ttarget = parent_derived;\n\t\t\t\tparent = parent_derived.parent;\n\t\t\t} else {\n\t\t\t\tvar parent_effect = /** @type {Effect} */ (parent);\n\n\t\t\t\tif (!parent_effect.deriveds?.includes(target)) {\n\t\t\t\t\t(parent_effect.deriveds ??= []).push(target);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (is_derived) {\n\t\tderived = /** @type {Derived} */ (signal);\n\n\t\tif (check_dirtiness(derived)) {\n\t\t\tupdate_derived(derived);\n\t\t}\n\t}\n\n\tif (\n\t\tDEV &&\n\t\ttracing_mode_flag &&\n\t\ttracing_expressions !== null &&\n\t\tactive_reaction !== null &&\n\t\ttracing_expressions.reaction === active_reaction\n\t) {\n\t\t// Used when mapping state between special blocks like `each`\n\t\tif (signal.debug) {\n\t\t\tsignal.debug();\n\t\t} else if (signal.created) {\n\t\t\tvar entry = tracing_expressions.entries.get(signal);\n\n\t\t\tif (entry === undefined) {\n\t\t\t\tentry = { read: [] };\n\t\t\t\ttracing_expressions.entries.set(signal, entry);\n\t\t\t}\n\n\t\t\tentry.read.push(get_stack('TracedAt'));\n\t\t}\n\t}\n\n\treturn signal.v;\n}\n\n/**\n * Like `get`, but checks for `undefined`. Used for `var` declarations because they can be accessed before being declared\n * @template V\n * @param {Value<V> | undefined} signal\n * @returns {V | undefined}\n */\nexport function safe_get(signal) {\n\treturn signal && get(signal);\n}\n\n/**\n * Capture an array of all the signals that are read when `fn` is called\n * @template T\n * @param {() => T} fn\n */\nexport function capture_signals(fn) {\n\tvar previous_captured_signals = captured_signals;\n\tcaptured_signals = new Set();\n\n\tvar captured = captured_signals;\n\tvar signal;\n\n\ttry {\n\t\tuntrack(fn);\n\t\tif (previous_captured_signals !== null) {\n\t\t\tfor (signal of captured_signals) {\n\t\t\t\tprevious_captured_signals.add(signal);\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tcaptured_signals = previous_captured_signals;\n\t}\n\n\treturn captured;\n}\n\n/**\n * Invokes a function and captures all signals that are read during the invocation,\n * then invalidates them.\n * @param {() => any} fn\n */\nexport function invalidate_inner_signals(fn) {\n\tvar captured = capture_signals(() => untrack(fn));\n\n\tfor (var signal of captured) {\n\t\t// Go one level up because derived signals created as part of props in legacy mode\n\t\tif ((signal.f & LEGACY_DERIVED_PROP) !== 0) {\n\t\t\tfor (const dep of /** @type {Derived} */ (signal).deps || []) {\n\t\t\t\tif ((dep.f & DERIVED) === 0) {\n\t\t\t\t\t// Use internal_set instead of set here and below to avoid mutation validation\n\t\t\t\t\tinternal_set(dep, dep.v);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tinternal_set(signal, signal.v);\n\t\t}\n\t}\n}\n\n/**\n * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),\n * any state read inside `fn` will not be treated as a dependency.\n *\n * ```ts\n * $effect(() => {\n *   // this will run when `data` changes, but not when `time` changes\n *   save(data, {\n *     timestamp: untrack(() => time)\n *   });\n * });\n * ```\n * @template T\n * @param {() => T} fn\n * @returns {T}\n */\nexport function untrack(fn) {\n\tvar previous_untracking = untracking;\n\ttry {\n\t\tuntracking = true;\n\t\treturn fn();\n\t} finally {\n\t\tuntracking = previous_untracking;\n\t}\n}\n\nconst STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);\n\n/**\n * @param {Signal} signal\n * @param {number} status\n * @returns {void}\n */\nexport function set_signal_status(signal, status) {\n\tsignal.f = (signal.f & STATUS_MASK) | status;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\tconst context_map = get_or_init_context_map('getContext');\n\tconst result = /** @type {T} */ (context_map.get(key));\n\n\tif (DEV) {\n\t\tconst fn = /** @type {ComponentContext} */ (component_context).function;\n\t\tif (fn) {\n\t\t\tadd_owner(result, fn, true);\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tconst context_map = get_or_init_context_map('setContext');\n\tcontext_map.set(key, context);\n\treturn context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\tconst context_map = get_or_init_context_map('hasContext');\n\treturn context_map.has(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\tconst context_map = get_or_init_context_map('getAllContexts');\n\n\tif (DEV) {\n\t\tconst fn = component_context?.function;\n\t\tif (fn) {\n\t\t\tfor (const value of context_map.values()) {\n\t\t\t\tadd_owner(value, fn, true);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn /** @type {T} */ (context_map);\n}\n\n/**\n * @param {string} name\n * @returns {Map<unknown, unknown>}\n */\nfunction get_or_init_context_map(name) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component(name);\n\t}\n\n\treturn (component_context.c ??= new Map(get_parent_context(component_context) || undefined));\n}\n\n/**\n * @param {ComponentContext} component_context\n * @returns {Map<unknown, unknown> | null}\n */\nfunction get_parent_context(component_context) {\n\tlet parent = component_context.p;\n\twhile (parent !== null) {\n\t\tconst context_map = parent.c;\n\t\tif (context_map !== null) {\n\t\t\treturn context_map;\n\t\t}\n\t\tparent = parent.p;\n\t}\n\treturn null;\n}\n\n/**\n * @template {number | bigint} T\n * @param {Value<T>} signal\n * @param {1 | -1} [d]\n * @returns {T}\n */\nexport function update(signal, d = 1) {\n\tvar value = get(signal);\n\tvar result = d === 1 ? value++ : value--;\n\n\tset(signal, value);\n\n\t// @ts-expect-error\n\treturn result;\n}\n\n/**\n * @template {number | bigint} T\n * @param {Value<T>} signal\n * @param {1 | -1} [d]\n * @returns {T}\n */\nexport function update_pre(signal, d = 1) {\n\tvar value = get(signal);\n\n\t// @ts-expect-error\n\treturn set(signal, d === 1 ? ++value : --value);\n}\n\n/**\n * @param {Record<string, unknown>} obj\n * @param {string[]} keys\n * @returns {Record<string, unknown>}\n */\nexport function exclude_from_object(obj, keys) {\n\t/** @type {Record<string, unknown>} */\n\tvar result = {};\n\n\tfor (var key in obj) {\n\t\tif (!keys.includes(key)) {\n\t\t\tresult[key] = obj[key];\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {any} runes\n * @param {Function} [fn]\n * @returns {void}\n */\nexport function push(props, runes = false, fn) {\n\tcomponent_context = {\n\t\tp: component_context,\n\t\tc: null,\n\t\te: null,\n\t\tm: false,\n\t\ts: props,\n\t\tx: null,\n\t\tl: null\n\t};\n\n\tif (legacy_mode_flag && !runes) {\n\t\tcomponent_context.l = {\n\t\t\ts: null,\n\t\t\tu: null,\n\t\t\tr1: [],\n\t\t\tr2: source(false)\n\t\t};\n\t}\n\n\tif (DEV) {\n\t\t// component function\n\t\tcomponent_context.function = fn;\n\t\tdev_current_component_function = fn;\n\t}\n}\n\n/**\n * @template {Record<string, any>} T\n * @param {T} [component]\n * @returns {T}\n */\nexport function pop(component) {\n\tconst context_stack_item = component_context;\n\tif (context_stack_item !== null) {\n\t\tif (component !== undefined) {\n\t\t\tcontext_stack_item.x = component;\n\t\t}\n\t\tconst component_effects = context_stack_item.e;\n\t\tif (component_effects !== null) {\n\t\t\tvar previous_effect = active_effect;\n\t\t\tvar previous_reaction = active_reaction;\n\t\t\tcontext_stack_item.e = null;\n\t\t\ttry {\n\t\t\t\tfor (var i = 0; i < component_effects.length; i++) {\n\t\t\t\t\tvar component_effect = component_effects[i];\n\t\t\t\t\tset_active_effect(component_effect.effect);\n\t\t\t\t\tset_active_reaction(component_effect.reaction);\n\t\t\t\t\teffect(component_effect.fn);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tset_active_effect(previous_effect);\n\t\t\t\tset_active_reaction(previous_reaction);\n\t\t\t}\n\t\t}\n\t\tcomponent_context = context_stack_item.p;\n\t\tif (DEV) {\n\t\t\tdev_current_component_function = context_stack_item.p?.function ?? null;\n\t\t}\n\t\tcontext_stack_item.m = true;\n\t}\n\t// Micro-optimization: Don't set .a above to the empty object\n\t// so it can be garbage-collected when the return here is unused\n\treturn component || /** @type {T} */ ({});\n}\n\n/**\n * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.\n * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).\n * @param {any} value\n * @returns {void}\n */\nexport function deep_read_state(value) {\n\tif (typeof value !== 'object' || !value || value instanceof EventTarget) {\n\t\treturn;\n\t}\n\n\tif (STATE_SYMBOL in value) {\n\t\tdeep_read(value);\n\t} else if (!Array.isArray(value)) {\n\t\tfor (let key in value) {\n\t\t\tconst prop = value[key];\n\t\t\tif (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {\n\t\t\t\tdeep_read(prop);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Deeply traverse an object and read all its properties\n * so that they're all reactive in case this is `$state`\n * @param {any} value\n * @param {Set<any>} visited\n * @returns {void}\n */\nexport function deep_read(value, visited = new Set()) {\n\tif (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t// We don't want to traverse DOM elements\n\t\t!(value instanceof EventTarget) &&\n\t\t!visited.has(value)\n\t) {\n\t\tvisited.add(value);\n\t\t// When working with a possible SvelteDate, this\n\t\t// will ensure we capture changes to it.\n\t\tif (value instanceof Date) {\n\t\t\tvalue.getTime();\n\t\t}\n\t\tfor (let key in value) {\n\t\t\ttry {\n\t\t\t\tdeep_read(value[key], visited);\n\t\t\t} catch (e) {\n\t\t\t\t// continue\n\t\t\t}\n\t\t}\n\t\tconst proto = get_prototype_of(value);\n\t\tif (\n\t\t\tproto !== Object.prototype &&\n\t\t\tproto !== Array.prototype &&\n\t\t\tproto !== Map.prototype &&\n\t\t\tproto !== Set.prototype &&\n\t\t\tproto !== Date.prototype\n\t\t) {\n\t\t\tconst descriptors = get_descriptors(proto);\n\t\t\tfor (let key in descriptors) {\n\t\t\t\tconst get = descriptors[key].get;\n\t\t\t\tif (get) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tget.call(value);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (DEV) {\n\t/**\n\t * @param {string} rune\n\t */\n\tfunction throw_rune_error(rune) {\n\t\tif (!(rune in globalThis)) {\n\t\t\t// TODO if people start adjusting the \"this can contain runes\" config through v-p-s more, adjust this message\n\t\t\t/** @type {any} */\n\t\t\tlet value; // let's hope noone modifies this global, but belts and braces\n\t\t\tObject.defineProperty(globalThis, rune, {\n\t\t\t\tconfigurable: true,\n\t\t\t\t// eslint-disable-next-line getter-return\n\t\t\t\tget: () => {\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\n\t\t\t\t\te.rune_outside_svelte(rune);\n\t\t\t\t},\n\t\t\t\tset: (v) => {\n\t\t\t\t\tvalue = v;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tthrow_rune_error('$state');\n\tthrow_rune_error('$effect');\n\tthrow_rune_error('$derived');\n\tthrow_rune_error('$inspect');\n\tthrow_rune_error('$props');\n\tthrow_rune_error('$bindable');\n}\n","/** @param {string} html */\nexport function create_fragment_from_html(html) {\n\tvar elem = document.createElement('template');\n\telem.innerHTML = html;\n\treturn elem.content;\n}\n","/** @import { Effect, TemplateNode } from '#client' */\nimport { hydrate_next, hydrate_node, hydrating, set_hydrate_node } from './hydration.js';\nimport { create_text, get_first_child } from './operations.js';\nimport { create_fragment_from_html } from './reconciler.js';\nimport { active_effect } from '../runtime.js';\nimport { TEMPLATE_FRAGMENT, TEMPLATE_USE_IMPORT_NODE } from '../../../constants.js';\n\n/**\n * @param {TemplateNode} start\n * @param {TemplateNode | null} end\n */\nexport function assign_nodes(start, end) {\n\tvar effect = /** @type {Effect} */ (active_effect);\n\tif (effect.nodes_start === null) {\n\t\teffect.nodes_start = start;\n\t\teffect.nodes_end = end;\n\t}\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function template(content, flags) {\n\tvar is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;\n\tvar use_import_node = (flags & TEMPLATE_USE_IMPORT_NODE) !== 0;\n\n\t/** @type {Node} */\n\tvar node;\n\n\t/**\n\t * Whether or not the first item is a text/element node. If not, we need to\n\t * create an additional comment node to act as `effect.nodes.start`\n\t */\n\tvar has_start = !content.startsWith('<!>');\n\n\treturn () => {\n\t\tif (hydrating) {\n\t\t\tassign_nodes(hydrate_node, null);\n\t\t\treturn hydrate_node;\n\t\t}\n\n\t\tif (node === undefined) {\n\t\t\tnode = create_fragment_from_html(has_start ? content : '<!>' + content);\n\t\t\tif (!is_fragment) node = /** @type {Node} */ (get_first_child(node));\n\t\t}\n\n\t\tvar clone = /** @type {TemplateNode} */ (\n\t\t\tuse_import_node ? document.importNode(node, true) : node.cloneNode(true)\n\t\t);\n\n\t\tif (is_fragment) {\n\t\t\tvar start = /** @type {TemplateNode} */ (get_first_child(clone));\n\t\t\tvar end = /** @type {TemplateNode} */ (clone.lastChild);\n\n\t\t\tassign_nodes(start, end);\n\t\t} else {\n\t\t\tassign_nodes(clone, clone);\n\t\t}\n\n\t\treturn clone;\n\t};\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function template_with_script(content, flags) {\n\tvar fn = template(content, flags);\n\treturn () => run_scripts(/** @type {Element | DocumentFragment} */ (fn()));\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @param {'svg' | 'math'} ns\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function ns_template(content, flags, ns = 'svg') {\n\t/**\n\t * Whether or not the first item is a text/element node. If not, we need to\n\t * create an additional comment node to act as `effect.nodes.start`\n\t */\n\tvar has_start = !content.startsWith('<!>');\n\n\tvar is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;\n\tvar wrapped = `<${ns}>${has_start ? content : '<!>' + content}</${ns}>`;\n\n\t/** @type {Element | DocumentFragment} */\n\tvar node;\n\n\treturn () => {\n\t\tif (hydrating) {\n\t\t\tassign_nodes(hydrate_node, null);\n\t\t\treturn hydrate_node;\n\t\t}\n\n\t\tif (!node) {\n\t\t\tvar fragment = /** @type {DocumentFragment} */ (create_fragment_from_html(wrapped));\n\t\t\tvar root = /** @type {Element} */ (get_first_child(fragment));\n\n\t\t\tif (is_fragment) {\n\t\t\t\tnode = document.createDocumentFragment();\n\t\t\t\twhile (get_first_child(root)) {\n\t\t\t\t\tnode.appendChild(/** @type {Node} */ (get_first_child(root)));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode = /** @type {Element} */ (get_first_child(root));\n\t\t\t}\n\t\t}\n\n\t\tvar clone = /** @type {TemplateNode} */ (node.cloneNode(true));\n\n\t\tif (is_fragment) {\n\t\t\tvar start = /** @type {TemplateNode} */ (get_first_child(clone));\n\t\t\tvar end = /** @type {TemplateNode} */ (clone.lastChild);\n\n\t\t\tassign_nodes(start, end);\n\t\t} else {\n\t\t\tassign_nodes(clone, clone);\n\t\t}\n\n\t\treturn clone;\n\t};\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function svg_template_with_script(content, flags) {\n\tvar fn = ns_template(content, flags);\n\treturn () => run_scripts(/** @type {Element | DocumentFragment} */ (fn()));\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function mathml_template(content, flags) {\n\treturn ns_template(content, flags, 'math');\n}\n\n/**\n * Creating a document fragment from HTML that contains script tags will not execute\n * the scripts. We need to replace the script tags with new ones so that they are executed.\n * @param {Element | DocumentFragment} node\n * @returns {Node | Node[]}\n */\nfunction run_scripts(node) {\n\t// scripts were SSR'd, in which case they will run\n\tif (hydrating) return node;\n\n\tconst is_fragment = node.nodeType === 11;\n\tconst scripts =\n\t\t/** @type {HTMLElement} */ (node).tagName === 'SCRIPT'\n\t\t\t? [/** @type {HTMLScriptElement} */ (node)]\n\t\t\t: node.querySelectorAll('script');\n\tconst effect = /** @type {Effect} */ (active_effect);\n\n\tfor (const script of scripts) {\n\t\tconst clone = document.createElement('script');\n\t\tfor (var attribute of script.attributes) {\n\t\t\tclone.setAttribute(attribute.name, attribute.value);\n\t\t}\n\n\t\tclone.textContent = script.textContent;\n\n\t\t// The script has changed - if it's at the edges, the effect now points at dead nodes\n\t\tif (is_fragment ? node.firstChild === script : node === script) {\n\t\t\teffect.nodes_start = clone;\n\t\t}\n\t\tif (is_fragment ? node.lastChild === script : node === script) {\n\t\t\teffect.nodes_end = clone;\n\t\t}\n\n\t\tscript.replaceWith(clone);\n\t}\n\treturn node;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {any} value\n */\nexport function text(value = '') {\n\tif (!hydrating) {\n\t\tvar t = create_text(value + '');\n\t\tassign_nodes(t, t);\n\t\treturn t;\n\t}\n\n\tvar node = hydrate_node;\n\n\tif (node.nodeType !== 3) {\n\t\t// if an {expression} is empty during SSR, we need to insert an empty text node\n\t\tnode.before((node = create_text()));\n\t\tset_hydrate_node(node);\n\t}\n\n\tassign_nodes(node, node);\n\treturn node;\n}\n\nexport function comment() {\n\t// we're not delegating to `template` here for performance reasons\n\tif (hydrating) {\n\t\tassign_nodes(hydrate_node, null);\n\t\treturn hydrate_node;\n\t}\n\n\tvar frag = document.createDocumentFragment();\n\tvar start = document.createComment('');\n\tvar anchor = create_text();\n\tfrag.append(start, anchor);\n\n\tassign_nodes(start, anchor);\n\n\treturn frag;\n}\n\n/**\n * Assign the created (or in hydration mode, traversed) dom elements to the current block\n * and insert the elements into the dom (in client mode).\n * @param {Text | Comment | Element} anchor\n * @param {DocumentFragment | Element} dom\n */\nexport function append(anchor, dom) {\n\tif (hydrating) {\n\t\t/** @type {Effect} */ (active_effect).nodes_end = hydrate_node;\n\t\thydrate_next();\n\t\treturn;\n\t}\n\n\tif (anchor === null) {\n\t\t// edge case ‚Äî void `<svelte:element>` with content\n\t\treturn;\n\t}\n\n\tanchor.before(/** @type {Node} */ (dom));\n}\n","/** @import { ComponentContextLegacy } from '#client' */\nimport { run, run_all } from '../../../shared/utils.js';\nimport { derived } from '../../reactivity/deriveds.js';\nimport { user_pre_effect, user_effect } from '../../reactivity/effects.js';\nimport { component_context, deep_read_state, get, untrack } from '../../runtime.js';\n\n/**\n * Legacy-mode only: Call `onMount` callbacks and set up `beforeUpdate`/`afterUpdate` effects\n * @param {boolean} [immutable]\n */\nexport function init(immutable = false) {\n\tconst context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\tconst callbacks = context.l.u;\n\tif (!callbacks) return;\n\n\tlet props = () => deep_read_state(context.s);\n\n\tif (immutable) {\n\t\tlet version = 0;\n\t\tlet prev = /** @type {Record<string, any>} */ ({});\n\n\t\t// In legacy immutable mode, before/afterUpdate only fire if the object identity of a prop changes\n\t\tconst d = derived(() => {\n\t\t\tlet changed = false;\n\t\t\tconst props = context.s;\n\t\t\tfor (const key in props) {\n\t\t\t\tif (props[key] !== prev[key]) {\n\t\t\t\t\tprev[key] = props[key];\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (changed) version++;\n\t\t\treturn version;\n\t\t});\n\n\t\tprops = () => get(d);\n\t}\n\n\t// beforeUpdate\n\tif (callbacks.b.length) {\n\t\tuser_pre_effect(() => {\n\t\t\tobserve_all(context, props);\n\t\t\trun_all(callbacks.b);\n\t\t});\n\t}\n\n\t// onMount (must run before afterUpdate)\n\tuser_effect(() => {\n\t\tconst fns = untrack(() => callbacks.m.map(run));\n\t\treturn () => {\n\t\t\tfor (const fn of fns) {\n\t\t\t\tif (typeof fn === 'function') {\n\t\t\t\t\tfn();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t});\n\n\t// afterUpdate\n\tif (callbacks.a.length) {\n\t\tuser_effect(() => {\n\t\t\tobserve_all(context, props);\n\t\t\trun_all(callbacks.a);\n\t\t});\n\t}\n}\n\n/**\n * Invoke the getter of all signals associated with a component\n * so they can be registered to the effect this function is called in.\n * @param {ComponentContextLegacy} context\n * @param {(() => void)} props\n */\nfunction observe_all(context, props) {\n\tif (context.l.s) {\n\t\tfor (const signal of context.l.s) get(signal);\n\t}\n\n\tprops();\n}\n","/** @import { ComponentContext, ComponentContextLegacy } from '#client' */\n/** @import { EventDispatcher } from './index.js' */\n/** @import { NotFunction } from './internal/types.js' */\nimport { component_context, flush_sync, untrack } from './internal/client/runtime.js';\nimport { is_array } from './internal/shared/utils.js';\nimport { user_effect } from './internal/client/index.js';\nimport * as e from './internal/client/errors.js';\nimport { lifecycle_outside_component } from './internal/shared/errors.js';\nimport { legacy_mode_flag } from './internal/flags/index.js';\n\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\n *\n * `onMount` does not run inside [server-side components](https://svelte.dev/docs/svelte/svelte-server#render).\n *\n * @template T\n * @param {() => NotFunction<T> | Promise<NotFunction<T>> | (() => any)} fn\n * @returns {void}\n */\nexport function onMount(fn) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component('onMount');\n\t}\n\n\tif (legacy_mode_flag && component_context.l !== null) {\n\t\tinit_update_callbacks(component_context).m.push(fn);\n\t} else {\n\t\tuser_effect(() => {\n\t\t\tconst cleanup = untrack(fn);\n\t\t\tif (typeof cleanup === 'function') return /** @type {() => void} */ (cleanup);\n\t\t});\n\t}\n}\n\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * @param {() => any} fn\n * @returns {void}\n */\nexport function onDestroy(fn) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component('onDestroy');\n\t}\n\n\tonMount(() => () => untrack(fn));\n}\n\n/**\n * @template [T=any]\n * @param {string} type\n * @param {T} [detail]\n * @param {any}params_0\n * @returns {CustomEvent<T>}\n */\nfunction create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\n}\n\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs/svelte/legacy-on#Component-events).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n * ```ts\n * const dispatch = createEventDispatcher<{\n *  loaded: never; // does not take a detail argument\n *  change: string; // takes a detail argument of type string, which is required\n *  optional: number | null; // takes an optional detail argument of type number\n * }>();\n * ```\n *\n * @deprecated Use callback props and/or the `$host()` rune instead ‚Äî see [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Event-changes-Component-events)\n * @template {Record<string, any>} [EventMap = any]\n * @returns {EventDispatcher<EventMap>}\n */\nexport function createEventDispatcher() {\n\tconst active_component_context = component_context;\n\tif (active_component_context === null) {\n\t\tlifecycle_outside_component('createEventDispatcher');\n\t}\n\n\treturn (type, detail, options) => {\n\t\tconst events = /** @type {Record<string, Function | Function[]>} */ (\n\t\t\tactive_component_context.s.$$events\n\t\t)?.[/** @type {any} */ (type)];\n\n\t\tif (events) {\n\t\t\tconst callbacks = is_array(events) ? events.slice() : [events];\n\t\t\t// TODO are there situations where events could be dispatched\n\t\t\t// in a server (non-DOM) environment?\n\t\t\tconst event = create_custom_event(/** @type {string} */ (type), detail, options);\n\t\t\tfor (const fn of callbacks) {\n\t\t\t\tfn.call(active_component_context.x, event);\n\t\t\t}\n\t\t\treturn !event.defaultPrevented;\n\t\t}\n\n\t\treturn true;\n\t};\n}\n\n// TODO mark beforeUpdate and afterUpdate as deprecated in Svelte 6\n\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`.\n *\n * In runes mode use `$effect.pre` instead.\n *\n * @deprecated Use [`$effect.pre`](https://svelte.dev/docs/svelte/$effect#$effect.pre) instead\n * @param {() => void} fn\n * @returns {void}\n */\nexport function beforeUpdate(fn) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component('beforeUpdate');\n\t}\n\n\tif (component_context.l === null) {\n\t\te.lifecycle_legacy_only('beforeUpdate');\n\t}\n\n\tinit_update_callbacks(component_context).b.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`.\n *\n * In runes mode use `$effect` instead.\n *\n * @deprecated Use [`$effect`](https://svelte.dev/docs/svelte/$effect) instead\n * @param {() => void} fn\n * @returns {void}\n */\nexport function afterUpdate(fn) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component('afterUpdate');\n\t}\n\n\tif (component_context.l === null) {\n\t\te.lifecycle_legacy_only('afterUpdate');\n\t}\n\n\tinit_update_callbacks(component_context).a.push(fn);\n}\n\n/**\n * Legacy-mode: Init callbacks object for onMount/beforeUpdate/afterUpdate\n * @param {ComponentContext} context\n */\nfunction init_update_callbacks(context) {\n\tvar l = /** @type {ComponentContextLegacy} */ (context).l;\n\treturn (l.u ??= { a: [], b: [], m: [] });\n}\n\n/**\n * Synchronously flushes any pending state changes and those that result from it.\n * @param {() => void} [fn]\n * @returns {void}\n */\nexport function flushSync(fn) {\n\tflush_sync(fn);\n}\n\nexport { hydrate, mount, unmount } from './internal/client/render.js';\n\nexport {\n\tgetContext,\n\tgetAllContexts,\n\thasContext,\n\tsetContext,\n\ttick,\n\tuntrack\n} from './internal/client/runtime.js';\n\nexport { createRawSnippet } from './internal/client/dom/blocks/snippet.js';\n","/** @import { StoreReferencesContainer } from '#client' */\n/** @import { Store } from '#shared' */\nimport { subscribe_to_store } from '../../../store/utils.js';\nimport { get as get_store } from '../../../store/shared/index.js';\nimport { define_property, noop } from '../../shared/utils.js';\nimport { get } from '../runtime.js';\nimport { teardown } from './effects.js';\nimport { mutable_source, set } from './sources.js';\n\n/**\n * Whether or not the prop currently being read is a store binding, as in\n * `<Child bind:x={$y} />`. If it is, we treat the prop as mutable even in\n * runes mode, and skip `binding_property_non_reactive` validation\n */\nlet is_store_binding = false;\n\nlet IS_UNMOUNTED = Symbol();\n\n/**\n * Gets the current value of a store. If the store isn't subscribed to yet, it will create a proxy\n * signal that will be updated when the store is. The store references container is needed to\n * track reassignments to stores and to track the correct component context.\n * @template V\n * @param {Store<V> | null | undefined} store\n * @param {string} store_name\n * @param {StoreReferencesContainer} stores\n * @returns {V}\n */\nexport function store_get(store, store_name, stores) {\n\tconst entry = (stores[store_name] ??= {\n\t\tstore: null,\n\t\tsource: mutable_source(undefined),\n\t\tunsubscribe: noop\n\t});\n\n\t// if the component that setup this is already unmounted we don't want to register a subscription\n\tif (entry.store !== store && !(IS_UNMOUNTED in stores)) {\n\t\tentry.unsubscribe();\n\t\tentry.store = store ?? null;\n\n\t\tif (store == null) {\n\t\t\tentry.source.v = undefined; // see synchronous callback comment below\n\t\t\tentry.unsubscribe = noop;\n\t\t} else {\n\t\t\tvar is_synchronous_callback = true;\n\n\t\t\tentry.unsubscribe = subscribe_to_store(store, (v) => {\n\t\t\t\tif (is_synchronous_callback) {\n\t\t\t\t\t// If the first updates to the store value (possibly multiple of them) are synchronously\n\t\t\t\t\t// inside a derived, we will hit the `state_unsafe_mutation` error if we `set` the value\n\t\t\t\t\tentry.source.v = v;\n\t\t\t\t} else {\n\t\t\t\t\tset(entry.source, v);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tis_synchronous_callback = false;\n\t\t}\n\t}\n\n\t// if the component that setup this stores is already unmounted the source will be out of sync\n\t// so we just use the `get` for the stores, less performant but it avoids to create a memory leak\n\t// and it will keep the value consistent\n\tif (store && IS_UNMOUNTED in stores) {\n\t\treturn get_store(store);\n\t}\n\n\treturn get(entry.source);\n}\n\n/**\n * Unsubscribe from a store if it's not the same as the one in the store references container.\n * We need this in addition to `store_get` because someone could unsubscribe from a store but\n * then never subscribe to the new one (if any), causing the subscription to stay open wrongfully.\n * @param {Store<any> | null | undefined} store\n * @param {string} store_name\n * @param {StoreReferencesContainer} stores\n */\nexport function store_unsub(store, store_name, stores) {\n\t/** @type {StoreReferencesContainer[''] | undefined} */\n\tlet entry = stores[store_name];\n\n\tif (entry && entry.store !== store) {\n\t\t// Don't reset store yet, so that store_get above can resubscribe to new store if necessary\n\t\tentry.unsubscribe();\n\t\tentry.unsubscribe = noop;\n\t}\n\n\treturn store;\n}\n\n/**\n * Sets the new value of a store and returns that value.\n * @template V\n * @param {Store<V>} store\n * @param {V} value\n * @returns {V}\n */\nexport function store_set(store, value) {\n\tstore.set(value);\n\treturn value;\n}\n\n/**\n * @param {StoreReferencesContainer} stores\n * @param {string} store_name\n */\nexport function invalidate_store(stores, store_name) {\n\tvar entry = stores[store_name];\n\tif (entry.store !== null) {\n\t\tstore_set(entry.store, entry.source.v);\n\t}\n}\n\n/**\n * Unsubscribes from all auto-subscribed stores on destroy\n * @returns {[StoreReferencesContainer, ()=>void]}\n */\nexport function setup_stores() {\n\t/** @type {StoreReferencesContainer} */\n\tconst stores = {};\n\n\tfunction cleanup() {\n\t\tteardown(() => {\n\t\t\tfor (var store_name in stores) {\n\t\t\t\tconst ref = stores[store_name];\n\t\t\t\tref.unsubscribe();\n\t\t\t}\n\t\t\tdefine_property(stores, IS_UNMOUNTED, {\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t});\n\t}\n\n\treturn [stores, cleanup];\n}\n\n/**\n * Updates a store with a new value.\n * @param {Store<V>} store  the store to update\n * @param {any} expression  the expression that mutates the store\n * @param {V} new_value  the new store value\n * @template V\n */\nexport function store_mutate(store, expression, new_value) {\n\tstore.set(new_value);\n\treturn expression;\n}\n\n/**\n * @param {Store<number>} store\n * @param {number} store_value\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_store(store, store_value, d = 1) {\n\tstore.set(store_value + d);\n\treturn store_value;\n}\n\n/**\n * @param {Store<number>} store\n * @param {number} store_value\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_pre_store(store, store_value, d = 1) {\n\tconst value = store_value + d;\n\tstore.set(value);\n\treturn value;\n}\n\n/**\n * Called inside prop getters to communicate that the prop is a store binding\n */\nexport function mark_store_binding() {\n\tis_store_binding = true;\n}\n\n/**\n * Returns a tuple that indicates whether `fn()` reads a prop that is a store binding.\n * Used to prevent `binding_property_non_reactive` validation false positives and\n * ensure that these props are treated as mutable even in runes mode\n * @template T\n * @param {() => T} fn\n * @returns {[T, boolean]}\n */\nexport function capture_store_binding(fn) {\n\tvar previous_is_store_binding = is_store_binding;\n\n\ttry {\n\t\tis_store_binding = false;\n\t\treturn [fn(), is_store_binding];\n\t} finally {\n\t\tis_store_binding = previous_is_store_binding;\n\t}\n}\n","/** @import { Source } from './types.js' */\nimport { DEV } from 'esm-env';\nimport {\n\tPROPS_IS_BINDABLE,\n\tPROPS_IS_IMMUTABLE,\n\tPROPS_IS_LAZY_INITIAL,\n\tPROPS_IS_RUNES,\n\tPROPS_IS_UPDATED\n} from '../../../constants.js';\nimport { get_descriptor, is_function } from '../../shared/utils.js';\nimport { mutable_source, set, source } from './sources.js';\nimport { derived, derived_safe_equal } from './deriveds.js';\nimport {\n\tactive_effect,\n\tget,\n\tcaptured_signals,\n\tset_active_effect,\n\tuntrack,\n\tupdate\n} from '../runtime.js';\nimport { safe_equals } from './equality.js';\nimport * as e from '../errors.js';\nimport {\n\tBRANCH_EFFECT,\n\tLEGACY_DERIVED_PROP,\n\tLEGACY_PROPS,\n\tROOT_EFFECT,\n\tSTATE_SYMBOL\n} from '../constants.js';\nimport { proxy } from '../proxy.js';\nimport { capture_store_binding } from './store.js';\nimport { legacy_mode_flag } from '../../flags/index.js';\n\n/**\n * @param {((value?: number) => number)} fn\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_prop(fn, d = 1) {\n\tconst value = fn();\n\tfn(value + d);\n\treturn value;\n}\n\n/**\n * @param {((value?: number) => number)} fn\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_pre_prop(fn, d = 1) {\n\tconst value = fn() + d;\n\tfn(value);\n\treturn value;\n}\n\n/**\n * The proxy handler for rest props (i.e. `const { x, ...rest } = $props()`).\n * Is passed the full `$$props` object and excludes the named props.\n * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, name?: string }>}}\n */\nconst rest_props_handler = {\n\tget(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\treturn target.props[key];\n\t},\n\tset(target, key) {\n\t\tif (DEV) {\n\t\t\t// TODO should this happen in prod too?\n\t\t\te.props_rest_readonly(`${target.name}.${String(key)}`);\n\t\t}\n\n\t\treturn false;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tif (key in target.props) {\n\t\t\treturn {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: target.props[key]\n\t\t\t};\n\t\t}\n\t},\n\thas(target, key) {\n\t\tif (target.exclude.includes(key)) return false;\n\t\treturn key in target.props;\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));\n\t}\n};\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string[]} exclude\n * @param {string} [name]\n * @returns {Record<string, unknown>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function rest_props(props, exclude, name) {\n\treturn new Proxy(\n\t\tDEV ? { props, exclude, name, other: {}, to_proxy: [] } : { props, exclude },\n\t\trest_props_handler\n\t);\n}\n\n/**\n * The proxy handler for legacy $$restProps and $$props\n * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, special: Record<string | symbol, (v?: unknown) => unknown>, version: Source<number> }>}}\n */\nconst legacy_rest_props_handler = {\n\tget(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tget(target.version);\n\t\treturn key in target.special ? target.special[key]() : target.props[key];\n\t},\n\tset(target, key, value) {\n\t\tif (!(key in target.special)) {\n\t\t\t// Handle props that can temporarily get out of sync with the parent\n\t\t\t/** @type {Record<string, (v?: unknown) => unknown>} */\n\t\t\ttarget.special[key] = prop(\n\t\t\t\t{\n\t\t\t\t\tget [key]() {\n\t\t\t\t\t\treturn target.props[key];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/** @type {string} */ (key),\n\t\t\t\tPROPS_IS_UPDATED\n\t\t\t);\n\t\t}\n\n\t\ttarget.special[key](value);\n\t\tupdate(target.version); // $$props is coarse-grained: when $$props.x is updated, usages of $$props.y etc are also rerun\n\t\treturn true;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tif (key in target.props) {\n\t\t\treturn {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: target.props[key]\n\t\t\t};\n\t\t}\n\t},\n\tdeleteProperty(target, key) {\n\t\t// Svelte 4 allowed for deletions on $$restProps\n\t\tif (target.exclude.includes(key)) return true;\n\t\ttarget.exclude.push(key);\n\t\tupdate(target.version);\n\t\treturn true;\n\t},\n\thas(target, key) {\n\t\tif (target.exclude.includes(key)) return false;\n\t\treturn key in target.props;\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));\n\t}\n};\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string[]} exclude\n * @returns {Record<string, unknown>}\n */\nexport function legacy_rest_props(props, exclude) {\n\treturn new Proxy({ props, exclude, special: {}, version: source(0) }, legacy_rest_props_handler);\n}\n\n/**\n * The proxy handler for spread props. Handles the incoming array of props\n * that looks like `() => { dynamic: props }, { static: prop }, ..` and wraps\n * them so that the whole thing is passed to the component as the `$$props` argument.\n * @template {Record<string | symbol, unknown>} T\n * @type {ProxyHandler<{ props: Array<T | (() => T)> }>}}\n */\nconst spread_props_handler = {\n\tget(target, key) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (typeof p === 'object' && p !== null && key in p) return p[key];\n\t\t}\n\t},\n\tset(target, key, value) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tconst desc = get_descriptor(p, key);\n\t\t\tif (desc && desc.set) {\n\t\t\t\tdesc.set(value);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (typeof p === 'object' && p !== null && key in p) {\n\t\t\t\tconst descriptor = get_descriptor(p, key);\n\t\t\t\tif (descriptor && !descriptor.configurable) {\n\t\t\t\t\t// Prevent a \"Non-configurability Report Error\": The target is an array, it does\n\t\t\t\t\t// not actually contain this property. If it is now described as non-configurable,\n\t\t\t\t\t// the proxy throws a validation error. Setting it to true avoids that.\n\t\t\t\t\tdescriptor.configurable = true;\n\t\t\t\t}\n\t\t\t\treturn descriptor;\n\t\t\t}\n\t\t}\n\t},\n\thas(target, key) {\n\t\t// To prevent a false positive `is_entry_props` in the `prop` function\n\t\tif (key === STATE_SYMBOL || key === LEGACY_PROPS) return false;\n\n\t\tfor (let p of target.props) {\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (p != null && key in p) return true;\n\t\t}\n\n\t\treturn false;\n\t},\n\townKeys(target) {\n\t\t/** @type {Array<string | symbol>} */\n\t\tconst keys = [];\n\n\t\tfor (let p of target.props) {\n\t\t\tif (is_function(p)) p = p();\n\t\t\tfor (const key in p) {\n\t\t\t\tif (!keys.includes(key)) keys.push(key);\n\t\t\t}\n\t\t}\n\n\t\treturn keys;\n\t}\n};\n\n/**\n * @param {Array<Record<string, unknown> | (() => Record<string, unknown>)>} props\n * @returns {any}\n */\nexport function spread_props(...props) {\n\treturn new Proxy({ props }, spread_props_handler);\n}\n\n/**\n * @template T\n * @param {() => T} fn\n * @returns {T}\n */\nfunction with_parent_branch(fn) {\n\tvar effect = active_effect;\n\tvar previous_effect = active_effect;\n\n\twhile (effect !== null && (effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0) {\n\t\teffect = effect.parent;\n\t}\n\ttry {\n\t\tset_active_effect(effect);\n\t\treturn fn();\n\t} finally {\n\t\tset_active_effect(previous_effect);\n\t}\n}\n\n/**\n * This function is responsible for synchronizing a possibly bound prop with the inner component state.\n * It is used whenever the compiler sees that the component writes to the prop, or when it has a default prop_value.\n * @template V\n * @param {Record<string, unknown>} props\n * @param {string} key\n * @param {number} flags\n * @param {V | (() => V)} [fallback]\n * @returns {(() => V | ((arg: V) => V) | ((arg: V, mutation: boolean) => V))}\n */\nexport function prop(props, key, flags, fallback) {\n\tvar immutable = (flags & PROPS_IS_IMMUTABLE) !== 0;\n\tvar runes = !legacy_mode_flag || (flags & PROPS_IS_RUNES) !== 0;\n\tvar bindable = (flags & PROPS_IS_BINDABLE) !== 0;\n\tvar lazy = (flags & PROPS_IS_LAZY_INITIAL) !== 0;\n\tvar is_store_sub = false;\n\tvar prop_value;\n\n\tif (bindable) {\n\t\t[prop_value, is_store_sub] = capture_store_binding(() => /** @type {V} */ (props[key]));\n\t} else {\n\t\tprop_value = /** @type {V} */ (props[key]);\n\t}\n\n\t// Can be the case when someone does `mount(Component, props)` with `let props = $state({...})`\n\t// or `createClassComponent(Component, props)`\n\tvar is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props;\n\n\tvar setter =\n\t\t(bindable &&\n\t\t\t(get_descriptor(props, key)?.set ??\n\t\t\t\t(is_entry_props && key in props && ((v) => (props[key] = v))))) ||\n\t\tundefined;\n\n\tvar fallback_value = /** @type {V} */ (fallback);\n\tvar fallback_dirty = true;\n\tvar fallback_used = false;\n\n\tvar get_fallback = () => {\n\t\tfallback_used = true;\n\t\tif (fallback_dirty) {\n\t\t\tfallback_dirty = false;\n\t\t\tif (lazy) {\n\t\t\t\tfallback_value = untrack(/** @type {() => V} */ (fallback));\n\t\t\t} else {\n\t\t\t\tfallback_value = /** @type {V} */ (fallback);\n\t\t\t}\n\t\t}\n\n\t\treturn fallback_value;\n\t};\n\n\tif (prop_value === undefined && fallback !== undefined) {\n\t\tif (setter && runes) {\n\t\t\te.props_invalid_value(key);\n\t\t}\n\n\t\tprop_value = get_fallback();\n\t\tif (setter) setter(prop_value);\n\t}\n\n\t/** @type {() => V} */\n\tvar getter;\n\tif (runes) {\n\t\tgetter = () => {\n\t\t\tvar value = /** @type {V} */ (props[key]);\n\t\t\tif (value === undefined) return get_fallback();\n\t\t\tfallback_dirty = true;\n\t\t\tfallback_used = false;\n\t\t\treturn value;\n\t\t};\n\t} else {\n\t\t// Svelte 4 did not trigger updates when a primitive value was updated to the same value.\n\t\t// Replicate that behavior through using a derived\n\t\tvar derived_getter = with_parent_branch(() =>\n\t\t\t(immutable ? derived : derived_safe_equal)(() => /** @type {V} */ (props[key]))\n\t\t);\n\t\tderived_getter.f |= LEGACY_DERIVED_PROP;\n\t\tgetter = () => {\n\t\t\tvar value = get(derived_getter);\n\t\t\tif (value !== undefined) fallback_value = /** @type {V} */ (undefined);\n\t\t\treturn value === undefined ? fallback_value : value;\n\t\t};\n\t}\n\n\t// easy mode ‚Äî prop is never written to\n\tif ((flags & PROPS_IS_UPDATED) === 0) {\n\t\treturn getter;\n\t}\n\n\t// intermediate mode ‚Äî prop is written to, but the parent component had\n\t// `bind:foo` which means we can just call `$$props.foo = value` directly\n\tif (setter) {\n\t\tvar legacy_parent = props.$$legacy;\n\t\treturn function (/** @type {any} */ value, /** @type {boolean} */ mutation) {\n\t\t\tif (arguments.length > 0) {\n\t\t\t\t// We don't want to notify if the value was mutated and the parent is in runes mode.\n\t\t\t\t// In that case the state proxy (if it exists) should take care of the notification.\n\t\t\t\t// If the parent is not in runes mode, we need to notify on mutation, too, that the prop\n\t\t\t\t// has changed because the parent will not be able to detect the change otherwise.\n\t\t\t\tif (!runes || !mutation || legacy_parent || is_store_sub) {\n\t\t\t\t\t/** @type {Function} */ (setter)(mutation ? getter() : value);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn getter();\n\t\t\t}\n\t\t};\n\t}\n\n\t// hard mode. this is where it gets ugly ‚Äî the value in the child should\n\t// synchronize with the parent, but it should also be possible to temporarily\n\t// set the value to something else locally.\n\tvar from_child = false;\n\tvar was_from_child = false;\n\n\t// The derived returns the current value. The underlying mutable\n\t// source is written to from various places to persist this value.\n\tvar inner_current_value = mutable_source(prop_value);\n\tvar current_value = with_parent_branch(() =>\n\t\tderived(() => {\n\t\t\tvar parent_value = getter();\n\t\t\tvar child_value = get(inner_current_value);\n\n\t\t\tif (from_child) {\n\t\t\t\tfrom_child = false;\n\t\t\t\twas_from_child = true;\n\t\t\t\treturn child_value;\n\t\t\t}\n\n\t\t\twas_from_child = false;\n\t\t\treturn (inner_current_value.v = parent_value);\n\t\t})\n\t);\n\n\tif (!immutable) current_value.equals = safe_equals;\n\n\treturn function (/** @type {any} */ value, /** @type {boolean} */ mutation) {\n\t\t// legacy nonsense ‚Äî need to ensure the source is invalidated when necessary\n\t\t// also needed for when handling inspect logic so we can inspect the correct source signal\n\t\tif (captured_signals !== null) {\n\t\t\t// set this so that we don't reset to the parent value if `d`\n\t\t\t// is invalidated because of `invalidate_inner_signals` (rather\n\t\t\t// than because the parent or child value changed)\n\t\t\tfrom_child = was_from_child;\n\t\t\t// invoke getters so that signals are picked up by `invalidate_inner_signals`\n\t\t\tgetter();\n\t\t\tget(inner_current_value);\n\t\t}\n\n\t\tif (arguments.length > 0) {\n\t\t\tconst new_value = mutation ? get(current_value) : runes && bindable ? proxy(value) : value;\n\n\t\t\tif (!current_value.equals(new_value)) {\n\t\t\t\tfrom_child = true;\n\t\t\t\tset(inner_current_value, new_value);\n\t\t\t\t// To ensure the fallback value is consistent when used with proxies, we\n\t\t\t\t// update the local fallback_value, but only if the fallback is actively used\n\t\t\t\tif (fallback_used && fallback_value !== undefined) {\n\t\t\t\t\tfallback_value = new_value;\n\t\t\t\t}\n\t\t\t\tuntrack(() => get(current_value)); // force a synchronisation immediately\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\t\treturn get(current_value);\n\t};\n}\n","export function getResizeObserver(masonryInstance, gridElement, func = null) {\r\n\r\n    gridElement.masonryInstance = masonryInstance;\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n        \r\n        if(func) { \r\n            func(); \r\n        }\r\n        \r\n        masonryInstance.layout();\r\n    });\r\n    \r\n    resizeObserver.observe(gridElement);\r\n\r\n    return resizeObserver;\r\n}","import Log from \"../../../Log.js\";\r\nimport { getResizeObserver } from \"./getResizeObserver.js\";\r\n\r\n/**\r\n * Observes and manages the resizing behavior for the masonry layout.\r\n * Sets up the observer to trigger grid adjustments on resize.\r\n * @param {Object} masonryResizeConfig - Configuration for the masonry layout.\r\n * @returns {ResizeObserver} - The resize observer instance.\r\n */\r\nexport function observeMasonryResize(masonryResizeConfig, isMainGrid = false) {\r\n  const {\r\n    jQueryObject,          // The jQuery object representing the sheet\r\n    parentSelector,\r\n    childSelector,\r\n    gridSizerSelector,\r\n    gutterSizerSelector,\r\n    app\r\n  } = masonryResizeConfig;\r\n\r\n  // For debugging\r\n  Log.inspect(\"Html element 1\", observeMasonryResize.name, jQueryObject);\r\n\r\n  // Use jQuery find (not .querySelector)\r\n  // This gives us another jQuery object, potentially with 1 item\r\n  const $grid = jQueryObject.find(parentSelector);\r\n\r\n  Log.inspect(\"Html element 2 (jQuery grid)\", observeMasonryResize.name, $grid);\r\n\r\n  // Store it back into the config so adjustMasonryOnResize can see it\r\n  masonryResizeConfig.grid = $grid;\r\n\r\n  const rawGrid = $grid[0]; // The raw DOM node\r\n  if (!rawGrid) {\r\n    Log.warn(\"No matching grid found in jQuery object\", observeMasonryResize.name);\r\n    return;\r\n  }\r\n\r\n  // If there's no masonryInstance, create one\r\n  if (!rawGrid.masonryInstance) {\r\n    const masonryInstance = new Masonry(rawGrid, {\r\n      itemSelector: childSelector,\r\n      columnWidth: gridSizerSelector,\r\n      gutter: gutterSizerSelector,\r\n      fitWidth: true\r\n    });\r\n\r\n    rawGrid.masonryInstance = masonryInstance;\r\n\r\n    // Optionally watch layoutComplete\r\n    if (isMainGrid) {\r\n      masonryInstance.on(\"layoutComplete\", function () {\r\n        // do something if needed\r\n      });\r\n    }\r\n\r\n    // The resize callback\r\n    let resizeHandler = () => {\r\n      adjustMasonryOnResize(masonryResizeConfig);\r\n    };\r\n\r\n    // If this is the \"main\" grid, also run the layoutStateMachine\r\n    if (isMainGrid) {\r\n      resizeHandler = () => {\r\n        adjustMasonryOnResize(masonryResizeConfig);\r\n        layoutStateMachine(app, $grid);\r\n      };\r\n    }\r\n\r\n    // Attach the observer\r\n    masonryResizeConfig.observer = getResizeObserver(masonryInstance, rawGrid, resizeHandler);\r\n  }\r\n\r\n  // If we already had a masonry instance, layout again\r\n  if (rawGrid.masonryInstance) {\r\n    rawGrid.masonryInstance.layout();\r\n  }\r\n\r\n  // Start observing changes\r\n  masonryResizeConfig.observer.observe(rawGrid.parentNode);\r\n\r\n  Log.success(\"Masonry Resize Observer Initialized\", observeMasonryResize.name, masonryResizeConfig.observer);\r\n\r\n  return masonryResizeConfig.observer;\r\n}\r\n\r\n/**\r\n * Adjusts grid items within the masonry layout on resize.\r\n * Ensures items fit perfectly within the parent container.\r\n * @param {Object} masonryResizeConfig - Configuration for the masonry layout.\r\n */\r\nexport function adjustMasonryOnResize(masonryResizeConfig) {\r\n  const { grid, childSelector, gridSizerSelector, gutterSizerSelector } = masonryResizeConfig;\r\n  // `grid` is a jQuery object\r\n  if (!grid || !grid.length) return;\r\n\r\n  const $gridItems = grid.find(childSelector);\r\n  const $gridSizer = grid.find(gridSizerSelector);\r\n  const $gutter    = grid.find(gutterSizerSelector);\r\n\r\n  if (!$gridSizer.length || !$gridItems.length) return;\r\n\r\n  // Access the raw DOM nodes\r\n  const rawGrid   = grid[0];\r\n  const rawSizer  = $gridSizer[0];\r\n  const rawGutter = $gutter[0];\r\n\r\n  // Calculate sizes\r\n  const parentPadding   = parseFloat(getComputedStyle(rawGrid.parentNode).paddingLeft) || 0;\r\n  const gridWidthPx     = rawGrid.parentNode.offsetWidth - 2 * parentPadding;\r\n  const gutterPx        = parseFloat(getComputedStyle(rawGutter).width);\r\n  const minItemWidthPx  = parseFloat(getComputedStyle($gridItems[0]).minWidth);\r\n\r\n  // Calculate columns\r\n  let columnCount = Math.floor((gridWidthPx + gutterPx) / (minItemWidthPx + gutterPx));\r\n  columnCount = Math.max(columnCount, 1);\r\n\r\n  // Calculate item width\r\n  const totalGutterWidthPx  = gutterPx * (columnCount - 1);\r\n  const itemWidthPx         = (gridWidthPx - totalGutterWidthPx) / columnCount;\r\n  const adjustedItemWidthPx = Math.floor(itemWidthPx);\r\n\r\n  // Apply the new width to each item\r\n  // jQuery .toArray() -> real array, so we can .forEach\r\n  $gridItems.toArray().forEach((item) => {\r\n    item.style.width = `${adjustedItemWidthPx}px`;\r\n  });\r\n\r\n  // Adjust the grid sizer\r\n  rawSizer.style.width = `${adjustedItemWidthPx}px`;\r\n\r\n  // Trigger layout if we have a masonry instance\r\n  if (rawGrid.masonryInstance) {\r\n    rawGrid.masonryInstance.layout();\r\n  }\r\n}\r\n\r\n/**\r\n * Adjust sheet layout states using a jQuery object.\r\n * @param {ActorSheet} app - The Foundry sheet object\r\n * @param {JQuery} $html - jQuery object for the sheet's main container\r\n */\r\nfunction layoutStateMachine(app, $html) {\r\n  const sheetWidth = app.position?.width || 1400; \r\n  const maxWidth   = 1400;\r\n\r\n  // Layout thresholds\r\n  const lowerLimit  = 0.5 * maxWidth;\r\n  const middleLimit = 0.66 * maxWidth;\r\n\r\n  // Determine layout state\r\n  let layoutState = \"small\";\r\n  if (sheetWidth > middleLimit) {\r\n    layoutState = \"wide\";\r\n  } else if (sheetWidth > lowerLimit) {\r\n    layoutState = \"medium\";\r\n  }\r\n\r\n  // Column widths\r\n  const columnWidthPercent = { small: 100, medium: 50, wide: 25 };\r\n  const columnWidth        = columnWidthPercent[layoutState];\r\n\r\n  // Apply a custom CSS variable on the raw element\r\n  const rawHtml = $html[0]; // raw DOM node\r\n  rawHtml.style.setProperty(\"--column-width\", `${columnWidth}%`);\r\n\r\n  // Grab components with jQuery\r\n  const $twoSpan   = $html.find(\".two-span-selectable\");\r\n  const $threeSpan = $html.find(\".three-span-selectable\");\r\n\r\n  // We can convert them to arrays if we want .forEach:\r\n  const twoSpanArray   = $twoSpan.toArray();\r\n  const threeSpanArray = $threeSpan.toArray();\r\n\r\n  // Adjust widths\r\n  switch (layoutState) {\r\n    case \"small\":\r\n      twoSpanArray.forEach((c) => c.style.width = `var(--column-width)`);\r\n      threeSpanArray.forEach((c) => c.style.width = `var(--column-width)`);\r\n      break;\r\n    case \"medium\":\r\n      twoSpanArray.forEach((c) => c.style.width = `calc(2 * var(--column-width) - 10px)`);\r\n      threeSpanArray.forEach((c) => c.style.width = `var(--column-width)`);\r\n      break;\r\n    case \"wide\":\r\n      twoSpanArray.forEach((c) => c.style.width = `calc(2 * var(--column-width) - 10px)`);\r\n      threeSpanArray.forEach((c) => c.style.width = `calc(3 * var(--column-width) - 20px)`);\r\n      break;\r\n  }\r\n}","import { observeMasonryResize } from \"../services/observeMasonryLayout.js\";\r\n\r\nexport function initializeMasonryLayout(masonryResizeConfig) {\r\n\r\n    const actor = masonryResizeConfig.app.actor;\r\n\r\n    if (actor.mainLayoutResizeObserver) {\r\n        actor.mainLayoutResizeObserver.disconnect();\r\n        actor.mainLayoutResizeObserver = null;\r\n    }\r\n\r\n    actor.mainLayoutResizeObserver?.disconnect();\r\n    actor.mainLayoutResizeObserver = observeMasonryResize(masonryResizeConfig, true);\r\n}","<script>\r\n  \r\n  import { onMount } from \"svelte\";\r\n  import Log from \"../../../Log.js\";\r\n  import { initializeMasonryLayout } from \"../../foundry/masonry/masonryInitMain.js\";\r\n\r\n  export let app;\r\n  export let config;\r\n  export let jQueryObject;\r\n  \r\n  let actor = app.actor;\r\n  let name = actor?.name || \"Unknown Actor\";\r\n  let test = game.i18n.localize(config.test);\r\n\r\n  onMount(() => {\r\n    \r\n    const args = {\r\n      jQueryObject: jQueryObject,\r\n      parentSelector: \".character-sheet-masonry\",\r\n      childSelector: \".sheet-component\",\r\n      gridSizerSelector: \".layout-grid-sizer\",\r\n      gutterSizerSelector: \".layout-gutter-sizer\",\r\n      observer: actor.mainLayoutResizeObserver,\r\n      app: app,\r\n    };\r\n\r\n    initializeMasonryLayout(args, true);\r\n\r\n    Log.success(\"Masonry layout initialized\", \"CharacterSheetApp.svelte\");\r\n  });\r\n</script>\r\n  <div class=\"sheet-component\">\r\n    <div class=\"inner-background-container\">\r\n      <div class=\"fake-shadow\"></div>\r\n      <div class=\"inner-background\">\r\n        <h1>{test}</h1>\r\n        Testing Databind\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"sheet-component two-span-selectable\">\r\n    <div class=\"inner-background-container\">\r\n      <div class=\"fake-shadow\"></div>\r\n      <div class=\"inner-background\">\r\n        <h1>{test}</h1>\r\n        Testing Databind\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"sheet-component\">\r\n    <div class=\"inner-background-container\">\r\n      <div class=\"fake-shadow\"></div>\r\n      <div class=\"inner-background\">\r\n        <h1>{test}</h1>\r\n        Testing Databind\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"sheet-component\">\r\n    <div class=\"inner-background-container\">\r\n      <div class=\"fake-shadow\"></div>\r\n      <div class=\"inner-background\">\r\n        <h1>{test}</h1>\r\n        Testing Databind\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"sheet-component\">\r\n    <div class=\"inner-background-container\">\r\n      <div class=\"fake-shadow\"></div>\r\n      <div class=\"inner-background\">\r\n        <h1>{test}</h1>\r\n        Testing Databind\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"sheet-component\">\r\n    <div class=\"inner-background-container\">\r\n      <div class=\"fake-shadow\"></div>\r\n      <div class=\"inner-background\">\r\n        <h1>{test}</h1>\r\n        Testing Databind\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"sheet-component\">\r\n    <div class=\"inner-background-container\">\r\n      <div class=\"fake-shadow\"></div>\r\n      <div class=\"inner-background\">\r\n        <h1>{test}</h1>\r\n        Testing Databind\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n","import Log from \"../../../../Log\";\r\nimport CharacterActorSheet from \"../../sheets/CharacterActorSheet.js\";\r\nimport CharacterSheetApp from \"../../../svelte/apps/CharacterSheetApp.svelte\";\r\n\r\nexport function initMainMasonryGrid(app, html, data) {\r\n  if (!(app instanceof CharacterActorSheet)) return;\r\n\r\n  const container = document.querySelector(\".window-content\");\r\n\r\n  container.innerHTML = '';\r\n\r\n  app.svelteApp = new CharacterSheetApp({\r\n    target: container,\r\n    props: {\r\n      app: app,\r\n      config: CONFIG.sr3e,\r\n      jQueryObject: html\r\n    },\r\n  });\r\n\r\n  Log.success(\"Svelte App Initialized\", CharacterActorSheet.name);\r\n}\r\n\r\nexport function closeMainMasonryGrid(app) {\r\n  if (!(app instanceof CharacterActorSheet)) return;\r\n\r\n  if (app.svelteApp) {\r\n    console.info(\"Actor\", CharacterActorSheet.name, app.actor.mainLayoutResizeObserver);\r\n\r\n    app.actor.mainLayoutResizeObserver?.disconnect();\r\n    app.actor.mainLayoutResizeObserver = null;\r\n\r\n    console.info(\"Masonry observer disconnected.\", CharacterActorSheet.name);\r\n    app.svelteApp.$destroy();\r\n    app.svelteApp = null;\r\n\r\n    console.info(\"Svelte App Destroyed.\", CharacterActorSheet.name);\r\n  }\r\n}","import Log from \"./Log.js\";\r\nimport { sr3e } from \"./module/foundry/config.js\";\r\nimport CharacterModel from \"./module/models/actor/CharacterModel.js\";\r\nimport CharacterActorSheet from \"./module/foundry/sheets/CharacterActorSheet.js\";\r\nimport { \r\n  closeMainMasonryGrid, \r\n  initMainMasonryGrid } from \"./module/foundry/hooks/renderCharacterActorSheet/onRenderCharacterActorSheet.js\";\r\n\r\nconst hooks = {\r\n  renderCharacterActorSheet: \"renderCharacterActorSheet\",\r\n  closeCharacterActorSheet: \"closeCharacterActorSheet\",\r\n  init: \"init\",\r\n  ready: \"ready\"\r\n}\r\n\r\nfunction registerHooks() {\r\n\r\n  Hooks.on(hooks.renderCharacterActorSheet, initMainMasonryGrid);\r\n  Hooks.on(hooks.closeCharacterActorSheet, closeMainMasonryGrid);\r\n\r\n\r\n  Hooks.once(hooks.init, () => {\r\n\r\n    CONFIG.sr3e = sr3e;\r\n\r\n    Actors.unregisterSheet(\"core\", ActorSheet);\r\n\r\n    CONFIG.Actor.dataModels = {\r\n      \"character\": CharacterModel,\r\n    };\r\n\r\n    Actors.registerSheet(\"sr3e\", CharacterActorSheet, { types: [\"character\"], makeDefault: true });\r\n\r\n    Log.success(\"Hooks Registered\", \"sr3e.js\");\r\n    Log.success(\"Initialization Completed\", \"sr3e.js\");\r\n\r\n  });\r\n}\r\n\r\nregisterHooks();"],"names":["Log","message","sender","obj","icon","color","iconStyle","sr3eStyle","msgStyle","senderStyle","sr3e","Profile","SimpleStat","ComplexStat","AttributesModel","Creation","KarmaModel","HealthModel","CharacterModel","Attributes","CharacterActorSheet","PUBLIC_VERSION","legacy_mode_flag","tracing_mode_flag","enable_legacy_mode_flag","PROPS_IS_IMMUTABLE","PROPS_IS_RUNES","TEMPLATE_USE_IMPORT_NODE","DEV","index_of","get_descriptor","get_descriptors","get_prototype_of","run","fn","run_all","arr","i","DERIVED","EFFECT","RENDER_EFFECT","BLOCK_EFFECT","BRANCH_EFFECT","ROOT_EFFECT","BOUNDARY_EFFECT","UNOWNED","DISCONNECTED","CLEAN","DIRTY","MAYBE_DIRTY","INERT","DESTROYED","EFFECT_RAN","LEGACY_DERIVED_PROP","HEAD_EFFECT","EFFECT_HAS_DERIVED","STATE_SYMBOL","LEGACY_PROPS","equals","value","safe_not_equal","a","b","safe_equals","effect_in_teardown","rune","effect_in_unowned_derived","effect_orphan","effect_update_depth_exceeded","state_unsafe_local_read","source","v","stack","signal","first_child_getter","next_sibling_getter","get_first_child","node","get_next_sibling","child","is_text","first_child","fragment","first","sibling","count","next_sibling","derived","flags","active_effect","parent_derived","active_reaction","component_context","derived_safe_equal","destroy_derived_children","children","destroy_derived","destroy_effect","get_derived_parent_effect","parent","execute_derived","prev_active_effect","set_active_effect","update_reaction","update_derived","status","skip_reaction","set_signal_status","increment_write_version","remove_reactions","validate_effect","e.effect_orphan","e.effect_in_unowned_derived","is_destroying_effect","e.effect_in_teardown","push_effect","effect","parent_effect","parent_last","create_effect","type","sync","push","is_root","previously_flushing_effect","is_flushing_effect","set_is_flushing_effect","update_effect","e","schedule_effect","inert","user_effect","defer","context","user_pre_effect","render_effect","execute_effect_teardown","teardown","previously_destroying_effect","previous_reaction","set_is_destroying_effect","set_active_reaction","destroy_effect_deriveds","deriveds","destroy_effect_children","remove_dom","next","destroy_block_effect_children","removed","end","transitions","transition","unlink_effect","prev","lifecycle_outside_component","name","is_throwing_error","is_micro_task_queued","last_scheduled_effect","queued_root_effects","flush_count","untracking","reaction","derived_sources","new_deps","skipped_deps","untracked_writes","write_version","read_version","is_runes","check_dirtiness","_a","dependencies","is_unowned","dependency","is_disconnected","is_unowned_connected","length","propagate_error","error","current","should_rethrow_error","handle_error","previous_effect","schedule_possible_effect_self_invalidation","depth","reactions","previous_deps","previous_skipped_deps","previous_untracked_writes","previous_skip_reaction","prev_derived_sources","previous_component_context","previous_untracking","result","deps","remove_reaction","index","new_length","start_index","dep","infinite_loop_guard","e.effect_update_depth_exceeded","flush_queued_root_effects","root_effects","collected_effects","process_effects","flush_queued_effects","effects","process_deferred","previous_queued_root_effects","current_effect","main_loop","is_branch","is_skippable_branch","parent_sibling","get","is_derived","e.state_unsafe_local_read","target","untrack","STATUS_MASK","props","runes","pop","component","context_stack_item","component_effects","component_effect","deep_read_state","deep_read","key","prop","visited","proto","descriptors","create_fragment_from_html","html","elem","assign_nodes","start","template","content","use_import_node","has_start","clone","append","anchor","dom","init","immutable","callbacks","version","d","changed","observe_all","fns","onMount","init_update_callbacks","cleanup","l","is_store_binding","capture_store_binding","previous_is_store_binding","with_parent_branch","fallback","is_entry_props","fallback_value","fallback_dirty","get_fallback","getter","derived_getter","getResizeObserver","masonryInstance","gridElement","func","resizeObserver","observeMasonryResize","masonryResizeConfig","isMainGrid","jQueryObject","parentSelector","childSelector","gridSizerSelector","gutterSizerSelector","app","$grid","rawGrid","resizeHandler","adjustMasonryOnResize","layoutStateMachine","grid","$gridItems","$gridSizer","$gutter","rawSizer","rawGutter","parentPadding","gridWidthPx","gutterPx","minItemWidthPx","columnCount","totalGutterWidthPx","itemWidthPx","adjustedItemWidthPx","item","$html","sheetWidth","maxWidth","lowerLimit","middleLimit","layoutState","columnWidth","$twoSpan","$threeSpan","twoSpanArray","threeSpanArray","c","initializeMasonryLayout","actor","$.prop","$$props","config","test","args","initMainMasonryGrid","data","container","CharacterSheetApp","closeMainMasonryGrid","hooks","registerHooks"],"mappings":"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","x_google_ignoreList":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]}