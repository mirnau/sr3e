name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}   # optional, lets you rerun manually

permissions:
  contents: write

jobs:
  release:
    # extra guard so we only run on tag pushes or manual dispatch
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip

      # Use the event ref directly. For tag pushes this is rock solid.
      - name: Extract version from ref
        id: v
        run: |
          TAG="${GITHUB_REF_NAME}"      # e.g. v1.2.3-alpha.0
          VERSION="${TAG#v}"            #     1.2.3-alpha.0
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Install deps & build
        run: |
          npm ci
          npm run build

      - name: Build manifests (latest + pinned)
        run: |
          VERSION="${{ steps.v.outputs.version }}"
          REPO="https://github.com/${GITHUB_REPOSITORY}"
          ZIP="sr3e-${VERSION}.zip"

          MANIFEST_PINNED="${REPO}/releases/download/v${VERSION}/system.json"
          MANIFEST_LATEST="${REPO}/releases/latest/download/system.json"
          DOWNLOAD_URL="${REPO}/releases/download/v${VERSION}/${ZIP}"

          # Pinned for this exact version
          jq --arg ver "$VERSION" --arg manifest "$MANIFEST_PINNED" --arg download "$DOWNLOAD_URL" \
             '.version=$ver | .manifest=$manifest | .download=$download' system.json > system.pinned.json

          # Latest channel
          jq --arg ver "$VERSION" --arg manifest "$MANIFEST_LATEST" --arg download "$DOWNLOAD_URL" \
             '.version=$ver | .manifest=$manifest | .download=$download' system.json > system.latest.json

      - name: Package (players only)
        run: |
          VERSION="${{ steps.v.outputs.version }}"
          ROOT="package/sr3e"
          mkdir -p "$ROOT"
          cp system.pinned.json "$ROOT/system.json"
          cp -r build "$ROOT/"
          cp -r lang "$ROOT/" || true
          [ -d themes ]    && cp -r themes "$ROOT/"
          [ -d textures ]  && cp -r textures "$ROOT/"
          [ -d fonts ]     && cp -r fonts "$ROOT/"
          [ -d styles ]    && cp -r styles "$ROOT/"
          [ -d licences ]  && cp -r licences "$ROOT/"
          [ -d licenses ]  && cp -r licenses "$ROOT/"
          [ -f README.md ] && cp README.md "$ROOT/"

          (cd package && zip -r "../sr3e-${VERSION}.zip" "sr3e")

          # prepare "latest" manifest as separate asset
          cp system.latest.json system.json

      - name: Compose release body
        id: body
        run: |
          VERSION="${{ steps.v.outputs.version }}"
          {
            echo "Install/Update manifest (latest channel): https://github.com/${GITHUB_REPOSITORY}/releases/latest/download/system.json"
            echo "Pinned manifest for this version: https://github.com/${GITHUB_REPOSITORY}/releases/download/v${VERSION}/system.json"
            echo
            if echo "$VERSION" | grep -q -- "-alpha\\."; then
              echo "This is an alpha build. No migration scripts are in effect, any work done in the current"
              echo "system may break without warning or future fixes."
            fi
          } > RELEASE_BODY.md
          echo "path=RELEASE_BODY.md" >> "$GITHUB_OUTPUT"

      - name: Decide prerelease + latest flags
        id: flags
        run: |
          VERSION="${{ steps.v.outputs.version }}"
          if echo "$VERSION" | grep -q -- "-alpha\\."; then
            echo "prerelease=true"  >> "$GITHUB_OUTPUT"
            echo "make_latest=false" >> "$GITHUB_OUTPUT"
          elif echo "$VERSION" | grep -q -- "-beta\\."; then
            echo "prerelease=true"  >> "$GITHUB_OUTPUT"
            echo "make_latest=false" >> "$GITHUB_OUTPUT"
          else
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
            echo "make_latest=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}             # <â€” use the event tag verbatim
          name: ${{ github.ref_name }}                 # title shown on Releases page
          body_path: ${{ steps.body.outputs.path }}
          files: |
            sr3e-${{ steps.v.outputs.version }}.zip
            system.json
            system.pinned.json
          prerelease: ${{ steps.flags.outputs.prerelease }}
          make_latest: ${{ steps.flags.outputs.make_latest }}
          # Temporarily set to false to avoid hard-failing before release creation
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
