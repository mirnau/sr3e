name: Create Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install tooling
        run: sudo apt-get update && sudo apt-get install -y jq zip

      - name: Configure git (for tagging/committing)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      # Skip bumping if this push IS the release commit
      - name: Determine bump type
        id: bump
        if: ${{ !contains(github.event.head_commit.message, 'chore(release)') }}
        run: |
          npx conventional-recommended-bump -p angular -r 0 | jq -r '.releaseType // "patch"' > .bump
          echo "BUMP_TYPE=$(cat .bump)" >> $GITHUB_ENV
          echo "bump=$(cat .bump)" >> "$GITHUB_OUTPUT"

      - name: Version bump + tag
        if: steps.bump.outputs.bump != ''
        run: |
          npx standard-version --release-as "${BUMP_TYPE}"
          git push --follow-tags origin HEAD:main

      - name: Read version
        id: v
        if: steps.bump.outputs.bump != ''
        run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> "$GITHUB_OUTPUT"

      - name: Update system.json (bump + URLs)
        if: steps.v.outputs.VERSION != ''
        run: |
          VERSION="${{ steps.v.outputs.VERSION }}"
          REPO="https://github.com/${GITHUB_REPOSITORY}"
          ZIP="sr3e-${VERSION}.zip"

          MANIFEST_PINNED="${REPO}/releases/download/v${VERSION}/system.json"
          MANIFEST_LATEST="${REPO}/releases/latest/download/system.json"
          DOWNLOAD_URL="${REPO}/releases/download/v${VERSION}/${ZIP}"

          jq --arg ver "$VERSION" \
             --arg manifest "$MANIFEST_LATEST" \
             --arg download "$DOWNLOAD_URL" \
             '.version=$ver | .manifest=$manifest | .download=$download' \
             system.json > system.json.tmp && mv system.json.tmp system.json

          echo "MANIFEST_PINNED=$MANIFEST_PINNED" >> "$GITHUB_ENV"

      - name: Build
        if: steps.v.outputs.VERSION != ''
        run: npm run build

      - name: Create package (players only)
        if: steps.v.outputs.VERSION != ''
        run: |
          set -e
          VERSION="${{ steps.v.outputs.VERSION }}"
          ROOT="package/sr3e"
          mkdir -p "$ROOT"

          cp system.json "$ROOT/"
          cp -r build "$ROOT/"
          cp -r lang "$ROOT/"
          [ -d themes ]    && cp -r themes "$ROOT/"
          [ -d textures ]  && cp -r textures "$ROOT/"
          [ -d fonts ]     && cp -r fonts "$ROOT/"
          [ -d styles ]    && cp -r styles "$ROOT/"
          [ -d licences ]  && cp -r licences "$ROOT/"
          [ -d licenses ]  && cp -r licenses "$ROOT/"
          [ -f README.md ] && cp README.md "$ROOT/"

          (cd package && zip -r "../sr3e-${VERSION}.zip" "sr3e")

      - name: Write release body (manifest link)
        if: steps.v.outputs.VERSION != ''
        run: |
          echo "Foundry VTT manifest: ${MANIFEST_PINNED}" > RELEASE_BODY.md

      - name: Create GitHub Release
        if: steps.v.outputs.VERSION != ''
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_BODY.md
          files: |
            sr3e-${{ steps.v.outputs.VERSION }}.zip
            system.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
