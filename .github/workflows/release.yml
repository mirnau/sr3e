name: Create Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install tooling
        run: sudo apt-get update && sudo apt-get install -y jq zip

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Git state (debug)
        run: |
          set -e
          echo "HEAD: $(git rev-parse --short HEAD)"
          echo "HEAD msg: $(git log -1 --pretty=%s)"
          echo "Tags local:"
          git tag --list | sort -V || true
          echo "Tags remote:"
          git ls-remote --tags origin || true
          echo "package.json version:"
          node -p "require('./package.json').version"

      # Skip if this push IS the release commit
      - name: Guard: skip on release commit
        id: guard
        run: |
          MSG="$(git log -1 --pretty=%s)"
          if echo "$MSG" | grep -q "chore(release)"; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine bump type (fallback to patch)
        id: bump
        if: steps.guard.outputs.skip == 'false'
        run: |
          set -e
          TYPE="$(npx conventional-recommended-bump -p angular -r 0 || true)"
          TYPE="$(echo "$TYPE" | tr -d '\r\n' | xargs)"
          if [ -z "$TYPE" ]; then TYPE=patch; fi
          echo "BUMP_TYPE=$TYPE" | tee -a "$GITHUB_ENV"
          echo "type=$TYPE" >> "$GITHUB_OUTPUT"

      - name: Compute next base version
        id: next
        if: steps.guard.outputs.skip == 'false'
        run: |
          set -e
          BASE="$(node -p "require('./package.json').version.split('-')[0]")"
          IFS='.' read -r MA MI PA <<< "$BASE"
          case "${{ steps.bump.outputs.type }}" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch|*) PA=$((PA+1)) ;;
          esac
          NEXT_BASE="${MA}.${MI}.${PA}"
          echo "BASE=$BASE  ->  NEXT_BASE=$NEXT_BASE"
          echo "base=$BASE"       >> "$GITHUB_OUTPUT"
          echo "next_base=$NEXT_BASE" >> "$GITHUB_OUTPUT"

      - name: Version bump + tag (force alpha.0)
        if: steps.guard.outputs.skip == 'false'
        run: |
          set -e
          npx standard-version --release-as "${{ steps.next.outputs.next_base }}-alpha.0"
          git push --follow-tags origin HEAD:main

      - name: Read version
        id: v
        if: steps.guard.outputs.skip == 'false'
        run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> "$GITHUB_OUTPUT"

      - name: Build manifests (latest + pinned)
        if: steps.guard.outputs.skip == 'false'
        run: |
          set -e
          VERSION="${{ steps.v.outputs.VERSION }}"
          REPO="https://github.com/${GITHUB_REPOSITORY}"
          ZIP="sr3e-${VERSION}.zip"

          MANIFEST_PINNED="${REPO}/releases/download/v${VERSION}/system.json"
          MANIFEST_LATEST="${REPO}/releases/latest/download/system.json"
          DOWNLOAD_URL="${REPO}/releases/download/v${VERSION}/${ZIP}"

          jq --arg ver "$VERSION" --arg manifest "$MANIFEST_LATEST" --arg download "$DOWNLOAD_URL" \
             '.version=$ver | .manifest=$manifest | .download=$download' \
             system.json > system.latest.json

          jq --arg ver "$VERSION" --arg manifest "$MANIFEST_PINNED" --arg download "$DOWNLOAD_URL" \
             '.version=$ver | .manifest=$manifest | .download=$download' \
             system.json > system.pinned.json

      - name: Build
        if: steps.guard.outputs.skip == 'false'
        run: npm run build

      - name: Create package (players only)
        if: steps.guard.outputs.skip == 'false'
        run: |
          set -e
          VERSION="${{ steps.v.outputs.VERSION }}"
          ROOT="package/sr3e"
          mkdir -p "$ROOT"

          cp system.pinned.json "$ROOT/system.json"
          cp -r build "$ROOT/"
          cp -r lang "$ROOT/"
          [ -d themes ]    && cp -r themes "$ROOT/"
          [ -d textures ]  && cp -r textures "$ROOT/"
          [ -d fonts ]     && cp -r fonts "$ROOT/"
          [ -d styles ]    && cp -r styles "$ROOT/"
          [ -d licences ]  && cp -r licences "$ROOT/"
          [ -d licenses ]  && cp -r licenses "$ROOT/"
          [ -f README.md ] && cp README.md "$ROOT/"

          (cd package && zip -r "../sr3e-${VERSION}.zip" "sr3e")

          # upload alias for latest-channel
          cp system.latest.json system.json

      - name: Write release body + summary
        if: steps.guard.outputs.skip == 'false'
        run: |
          VERSION="${{ steps.v.outputs.VERSION }}"
          {
            echo "Install/Update manifest (latest channel): https://github.com/${GITHUB_REPOSITORY}/releases/latest/download/system.json"
            echo "Pinned manifest for this version: https://github.com/${GITHUB_REPOSITORY}/releases/download/v${VERSION}/system.json"
          } > RELEASE_BODY.md
          {
            echo "### Release v${VERSION}"
            echo "- Latest: https://github.com/${GITHUB_REPOSITORY}/releases/latest/download/system.json"
            echo "- Pinned: https://github.com/${GITHUB_REPOSITORY}/releases/download/v${VERSION}/system.json"
            echo "- Zip: https://github.com/${GITHUB_REPOSITORY}/releases/download/v${VERSION}/sr3e-${VERSION}.zip"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Create GitHub Release
        if: steps.guard.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.v.outputs.VERSION }}
          body_path: RELEASE_BODY.md
          files: |
            sr3e-${{ steps.v.outputs.VERSION }}.zip
            system.json
            system.pinned.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
